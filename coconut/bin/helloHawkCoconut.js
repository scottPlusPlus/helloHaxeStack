// Generated by Haxe 4.1.4
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class APIUtil {
	static host() {
		if(APIUtil._host.length == 0) {
			let u = GlobalState.ensure().currentURL;
			let str = tink_Url.toString(u);
			APIUtil._host = str.substring(0,str.lastIndexOf(u.query == null ? u.path : (u.path == null ? "null" : u.path) + "?" + (u.query == null ? "null" : u.query))) + "/";
			zenlog_Log.Logger.debug("APIUtil set host to " + APIUtil._host,null,{ fileName : "src/APIUtil.hx", lineNumber : 19, className : "APIUtil", methodName : "host"});
		}
		return APIUtil._host;
	}
	static makePost(relativeUrl,data) {
		let url = APIUtil.host() + relativeUrl;
		let body_str = hawk_util_Json.anonToJson(data);
		zenlog_Log.Logger.debug("posting  " + url + "  with  " + body_str,null,{ fileName : "src/APIUtil.hx", lineNumber : 27, className : "APIUtil", methodName : "makePost"});
		let auth = GlobalState.ensure().userToken;
		return APIUtil.extractBodyOrError(tink_http_FetchResponse.all(tink_http_Fetch.fetch(tink_Url.fromString(url),{ method : "POST", headers : [new tink_http_HeaderField("content-type","application/json"),new tink_http_HeaderField("authorization",auth)], body : new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(body_str))))})),url);
	}
	static makeGet(relativeUrl) {
		let url = APIUtil.host() + relativeUrl;
		zenlog_Log.Logger.debug("getting  " + url,null,{ fileName : "src/APIUtil.hx", lineNumber : 42, className : "APIUtil", methodName : "makeGet"});
		return APIUtil.extractBodyOrError(tink_http_FetchResponse.all(tink_http_Fetch.fetch(tink_Url.fromString(url),{ method : "GET", headers : [new tink_http_HeaderField("content-type","application/json")]})),url);
	}
	static extractBodyOrError(p,url) {
		return p.map(function(o) {
			switch(o._hx_index) {
			case 0:
				let _g = o.data;
				let status = _g.header.statusCode;
				if(status < 200 || status >= 300) {
					zenlog_Log.Logger.error("post " + url + " response == " + httpstatus_HttpStatusMessage.fromCode(_g.header.statusCode),null,{ fileName : "src/APIUtil.hx", lineNumber : 57, className : "APIUtil", methodName : "extractBodyOrError"});
					return tink_core_Outcome.Failure(new tink_core_TypedError(null,"bad status code: " + httpstatus_HttpStatusMessage.fromCode(_g.header.statusCode) + " ",{ fileName : "src/APIUtil.hx", lineNumber : 58, className : "APIUtil", methodName : "extractBodyOrError"}));
				}
				return tink_core_Outcome.Success(_g.body.toString());
			case 1:
				let _g1 = o.failure;
				zenlog_Log.Logger.error("post " + url + " failed:",null,{ fileName : "src/APIUtil.hx", lineNumber : 63, className : "APIUtil", methodName : "extractBodyOrError"});
				zenlog_Log.Logger.error(_g1,null,{ fileName : "src/APIUtil.hx", lineNumber : 64, className : "APIUtil", methodName : "extractBodyOrError"});
				return tink_core_Outcome.Failure(_g1);
			}
		}).gather();
	}
}
APIUtil.__name__ = true;
class DateTools {
	static __format_get(d,e) {
		switch(e) {
		case "%":
			return "%";
		case "A":
			return DateTools.DAY_NAMES[d.getDay()];
		case "B":
			return DateTools.MONTH_NAMES[d.getMonth()];
		case "C":
			return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
		case "D":
			return DateTools.__format(d,"%m/%d/%y");
		case "F":
			return DateTools.__format(d,"%Y-%m-%d");
		case "I":case "l":
			let hour = d.getHours() % 12;
			return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
		case "M":
			return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
		case "R":
			return DateTools.__format(d,"%H:%M");
		case "S":
			return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
		case "T":
			return DateTools.__format(d,"%H:%M:%S");
		case "Y":
			return Std.string(d.getFullYear());
		case "a":
			return DateTools.DAY_SHORT_NAMES[d.getDay()];
		case "b":case "h":
			return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
		case "d":
			return StringTools.lpad(Std.string(d.getDate()),"0",2);
		case "e":
			return Std.string(d.getDate());
		case "H":case "k":
			return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
		case "m":
			return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
		case "n":
			return "\n";
		case "p":
			if(d.getHours() > 11) {
				return "PM";
			} else {
				return "AM";
			}
			break;
		case "r":
			return DateTools.__format(d,"%I:%M:%S %p");
		case "s":
			return Std.string(d.getTime() / 1000 | 0);
		case "t":
			return "\t";
		case "u":
			let t = d.getDay();
			if(t == 0) {
				return "7";
			} else if(t == null) {
				return "null";
			} else {
				return "" + t;
			}
			break;
		case "w":
			return Std.string(d.getDay());
		case "y":
			return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
		default:
			throw haxe_Exception.thrown("Date.format %" + e + "- not implemented yet.");
		}
	}
	static __format(d,f) {
		let r_b = "";
		let p = 0;
		while(true) {
			let np = f.indexOf("%",p);
			if(np < 0) {
				break;
			}
			let len = np - p;
			r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
			r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
			p = np + 2;
		}
		let len = f.length - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		return r_b;
	}
	static format(d,f) {
		return DateTools.__format(d,f);
	}
}
DateTools.__name__ = true;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
}
EReg.__name__ = true;
Object.assign(EReg.prototype, {
	__class__: EReg
	,r: null
});
class GlobalState {
	constructor() {
		this.userToken = "";
	}
	static ensure() {
		if(GlobalState.instance == null) {
			GlobalState.instance = new GlobalState();
		}
		return GlobalState.instance;
	}
}
GlobalState.__name__ = true;
Object.assign(GlobalState.prototype, {
	__class__: GlobalState
	,userToken: null
	,currentURL: null
});
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	push(item) {
		let x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	first() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	pop() {
		if(this.h == null) {
			return null;
		}
		let x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
}
haxe_ds_List.__name__ = true;
Object.assign(haxe_ds_List.prototype, {
	__class__: haxe_ds_List
	,h: null
	,q: null
	,length: null
});
class tink_state_Observable {
	static get_value(this1) {
		return tink_state_Observable.measure(this1).a;
	}
	static map(this1,f) {
		return tink_state_Observable.create(function() {
			let m = tink_state_Observable.measure(this1);
			return new tink_core_MPair(f(m.a),m.b);
		});
	}
	static measure(this1) {
		let before = tink_state_Observable.stack.first();
		tink_state_Observable.stack.push(this1);
		let p = this1.poll();
		let _g = ((before) instanceof tink_state__$Observable_AutoObservable) ? before : null;
		if(_g != null) {
			_g.subscribe(p.b);
		}
		tink_state_Observable.stack.pop();
		return p;
	}
	static schedule(f) {
		let _g = tink_state_Observable.scheduled;
		if(_g == null) {
			f();
		} else {
			_g.push(f);
			tink_state_Observable.scheduleUpdate();
		}
	}
	static scheduleUpdate() {
		if(!tink_state_Observable.isScheduled) {
			tink_state_Observable.isScheduled = true;
			if(tink_state_Observable.hasRAF) {
				window.requestAnimationFrame(function(_) {
					tink_state_Observable.scheduledRun();
				});
			} else {
				tink_core_Callback.defer(tink_state_Observable.scheduledRun);
			}
		}
	}
	static scheduledRun() {
		tink_state_Observable.isScheduled = false;
		tink_state_Observable.updatePending();
	}
	static updatePending(maxSeconds) {
		if(maxSeconds == null) {
			maxSeconds = .01;
		}
		let end = HxOverrides.now() / 1000 + maxSeconds;
		while(true) {
			let old = tink_state_Observable.scheduled;
			tink_state_Observable.scheduled = [];
			let _g = 0;
			while(_g < old.length) old[_g++]();
			if(!(tink_state_Observable.scheduled.length > 0 && HxOverrides.now() / 1000 < end)) {
				break;
			}
		}
		if(tink_state_Observable.scheduled.length > 0) {
			tink_state_Observable.scheduleUpdate();
			return true;
		} else {
			return false;
		}
	}
	static create(f) {
		return new tink_state__$Observable_SimpleObservable(f);
	}
	static auto(f) {
		return new tink_state__$Observable_AutoObservable(f);
	}
	static const(value) {
		return new tink_state_ConstObservable(value);
	}
	static untracked(f) {
		tink_state_Observable.stack.push(null);
		return tink_core_TypedError.tryFinally(f,($_=tink_state_Observable.stack,$bind($_,$_.pop)));
	}
}
class HxOverrides {
	static dateStr(date) {
		let m = date.getMonth() + 1;
		let d = date.getDate();
		let h = date.getHours();
		let mi = date.getMinutes();
		let s = date.getSeconds();
		return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
	}
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true;
class tink_core_Callback {
	static invoke(this1,data) {
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			this1(data);
			tink_core_Callback.depth--;
		} else {
			let _e = this1;
			let _g = function(data) {
				tink_core_Callback.invoke(_e,data);
			};
			let data1 = data;
			tink_core_Callback.defer(function() {
				_g(data1);
			});
		}
	}
	static fromNiladic(f) {
		return f;
	}
	static defer(f) {
		haxe_Timer.delay(f,0);
	}
}
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
haxe_Timer.__name__ = true;
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
	,id: null
});
class coconut_diffing_Widget {
	constructor(rendered,mounted,updated,unmounting) {
		if(coconut_diffing_Widget._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(rendered,mounted,updated,unmounting);
	}
	_hx_constructor(rendered,mounted,updated,unmounting) {
		this._coco_pendingChildren = [];
		this._coco_alive = false;
		this._coco_invalid = false;
		let _gthis = this;
		this._coco_vStructure = tink_state_Observable.map(rendered,tink_state_Transform.plain(function(r) {
			if(r == null) {
				return _gthis._coco_differ.applicator.placeholder(_gthis);
			} else if(r._hx_index == 2) {
				let isEmpty = null;
				isEmpty = function(nodes) {
					let _g = 0;
					while(_g < nodes.length) {
						let n = nodes[_g];
						++_g;
						if(n != null) {
							if(n._hx_index == 2) {
								if(!isEmpty(n.nodes)) {
									return false;
								}
							} else {
								return false;
							}
						}
					}
					return true;
				};
				if(isEmpty(r.nodes)) {
					return _gthis._coco_differ.applicator.placeholder(_gthis);
				} else {
					return r;
				}
			} else {
				return r;
			}
		}));
		this._coco_viewMounted = mounted;
		this._coco_viewUpdated = updated;
		this._coco_viewUnmounting = unmounting;
	}
	_coco_getRender(later) {
		if(this._coco_invalid) {
			this._coco_invalid = false;
			let nuSnapshot = this._coco_poll().a;
			if(nuSnapshot != this._coco_lastSnapshot) {
				this._coco_lastSnapshot = nuSnapshot;
				this._coco_lastRender = this._coco_differ.updateAll(this._coco_lastRender,[nuSnapshot],this,later);
				later(this._coco_viewUpdated);
				this._coco_arm();
			}
		}
		return this._coco_lastRender;
	}
	_coco_poll() {
		let _e = this._coco_vStructure;
		return tink_state_Observable.untracked(function() {
			return tink_state_Observable.measure(_e);
		});
	}
	_coco_scheduleChild(child) {
		this._coco_pendingChildren.push(child);
		this._coco_invalidate();
	}
	_coco_invalidate() {
		if(!this._coco_invalid) {
			this._coco_invalid = true;
			if(this._coco_parent != null) {
				this._coco_parent._coco_scheduleChild(this);
			} else {
				let _g = $bind(this,this._coco_update);
				let later = null;
				let tmp = function() {
					_g(later);
				};
				coconut_diffing_Widget.defer(tmp);
			}
		}
	}
	_coco_updateChildren(later) {
		if(this._coco_pendingChildren.length > 0) {
			let _g = 0;
			let _g1 = this._coco_pendingChildren.splice(0,this._coco_pendingChildren.length);
			while(_g < _g1.length) _g1[_g++]._coco_update(later);
		}
	}
	_coco_performUpdate(later) {
		let previous = this._coco_lastRender;
		let next = this._coco_getRender(later);
		this._coco_updateChildren(later);
		if(previous == next) {
			return;
		}
		let previousCount = 0;
		let first = null;
		previous.each(later,function(r) {
			if(first == null) {
				first = r;
			}
			previousCount += 1;
		});
		this._coco_differ.setChildren(later,previousCount,this._coco_differ.applicator.traverseSiblings(first),next);
	}
	_coco_update(later) {
		if(this._coco_invalid && this._coco_alive) {
			if(later == null) {
				this._coco_differ.run($bind(this,this._coco_performUpdate));
			} else {
				this._coco_performUpdate(later);
			}
		}
	}
	_coco_arm() {
		let this1 = this._coco_link;
		if(this1 != null) {
			this1.cancel();
		}
		this._coco_link = this._coco_poll().b.handle(tink_core_Callback.fromNiladic($bind(this,this._coco_invalidate)));
	}
	_coco_teardown() {
		this._coco_alive = false;
		this._coco_viewUnmounting();
		let _g = 0;
		let _g1 = this._coco_lastRender.childList;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			let _this = this._coco_differ;
			switch(c._hx_index) {
			case 0:
				let _g2 = _this.applicator.unsetLastRender(c.r);
				if(_g2 != null) {
					let _g = _g2.childList;
					let _g1 = 0;
					while(_g1 < _g.length) _this.destroyRender(_g[_g1++]);
				}
				break;
			case 1:
				c.w._coco_teardown();
				break;
			}
		}
	}
	_coco_initialize(differ,parent,later) {
		this._coco_alive = true;
		this._coco_parent = parent;
		this._coco_differ = differ;
		this._coco_lastRender = differ.renderAll([this._coco_lastSnapshot = this._coco_poll().a],this,later);
		this._coco_arm();
		later(this._coco_viewMounted);
	}
}
coconut_diffing_Widget.__name__ = true;
Object.assign(coconut_diffing_Widget.prototype, {
	__class__: coconut_diffing_Widget
	,_coco_viewMounted: null
	,_coco_viewUpdated: null
	,_coco_viewUnmounting: null
	,_coco_vStructure: null
	,_coco_lastSnapshot: null
	,_coco_lastRender: null
	,_coco_invalid: null
	,_coco_alive: null
	,_coco_parent: null
	,_coco_differ: null
	,_coco_link: null
	,_coco_pendingChildren: null
});
class coconut_vdom_View extends coconut_diffing_Widget {
	constructor(render,shouldUpdate,track,beforeRerender,rendered) {
		if(coconut_diffing_Widget._hx_skip_constructor) {
			super();
			return;
		}
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(render,shouldUpdate,track,beforeRerender,rendered);
	}
	_hx_constructor(render,shouldUpdate,track,beforeRerender,rendered) {
		this.__au = [];
		this.__bc = [];
		this.__bu = [];
		this._coco_revision = new tink_state__$State_SimpleState(0,null,null);
		let _gthis = this;
		let mounted;
		if(rendered != null) {
			let _g = rendered;
			let a1 = true;
			mounted = function() {
				_g(a1);
			};
		} else {
			mounted = null;
		}
		let updated;
		if(rendered != null) {
			let _g = rendered;
			let a1 = false;
			updated = function() {
				_g(a1);
			};
		} else {
			updated = null;
		}
		let firstTime = true;
		let last = null;
		let hasBeforeRerender = beforeRerender != null;
		let hasUpdated = updated != null;
		let lastRev = tink_state_State.get_value(this._coco_revision);
		super._hx_constructor(tink_state_Observable.auto({ f : function() {
			let curRev = tink_state_State.get_value(_gthis._coco_revision);
			if(track != null) {
				track();
			}
			if(firstTime) {
				firstTime = false;
			} else {
				if(curRev == lastRev && shouldUpdate != null && !shouldUpdate()) {
					return last;
				}
				let hasCallbacks = _gthis.__bc.length > 0;
				if(hasBeforeRerender || hasCallbacks) {
					tink_state_Observable.untracked(function() {
						if(hasBeforeRerender) {
							beforeRerender();
						}
						if(hasCallbacks) {
							let _g = 0;
							let _g1 = _gthis.__bc.splice(0,_gthis.__bc.length);
							while(_g < _g1.length) tink_core_Callback.invoke(_g1[_g++],false);
						}
					});
				}
			}
			lastRev = curRev;
			last = render();
			return last;
		}}),mounted,function() {
			let hasCallbacks = _gthis.__au.length > 0;
			if(hasUpdated || hasCallbacks) {
				tink_state_Observable.untracked(function() {
					if(hasUpdated) {
						updated();
					}
					if(hasCallbacks) {
						let _g = 0;
						let _g1 = _gthis.__au.splice(0,_gthis.__au.length);
						while(_g < _g1.length) tink_core_Callback.invoke(_g1[_g++],tink_core_Noise.Noise);
					}
				});
			}
		},function() {
			last = null;
			firstTime = true;
			_gthis.__beforeUnmount();
		});
	}
	__beforeUnmount() {
		let _g = 0;
		let _g1 = this.__bu.splice(0,this.__bu.length);
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			if(c != null) {
				c.cancel();
			}
		}
		let _g2 = 0;
		let _g3 = this.__bc.splice(0,this.__bu.length);
		while(_g2 < _g3.length) tink_core_Callback.invoke(_g3[_g2++],true);
	}
}
coconut_vdom_View.__name__ = true;
coconut_vdom_View.__super__ = coconut_diffing_Widget;
Object.assign(coconut_vdom_View.prototype, {
	__class__: coconut_vdom_View
	,_coco_revision: null
	,__bu: null
	,__bc: null
	,__au: null
});
class tink_state_State {
	static get_value(this1) {
		return tink_state_Observable.get_value(this1);
	}
}
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let n = e.__constructs__[o._hx_index];
				let con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		while(true) {
			if(cc == null) {
				return false;
			}
			if(cc == cl) {
				return true;
			}
			let intf = cc.__interfaces__;
			if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
				let _g = 0;
				let _g1 = intf.length;
				while(_g < _g1) {
					let i = intf[_g++];
					if(i == cl || js_Boot.__interfLoop(i,cl)) {
						return true;
					}
				}
			}
			cc = cc.__super__;
		}
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
class tink_state_ObservableObject {
}
tink_state_ObservableObject.__name__ = true;
tink_state_ObservableObject.__isInterface__ = true;
Object.assign(tink_state_ObservableObject.prototype, {
	__class__: tink_state_ObservableObject
	,poll: null
});
class tink_state__$Observable_SimpleObservable {
	constructor(f) {
		if(tink_state__$Observable_SimpleObservable._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(f);
	}
	_hx_constructor(f) {
		this._poll = f;
	}
	resetCache(_) {
		this.cache = null;
	}
	poll() {
		let count = 0;
		let last = null;
		while(this.cache == null) {
			let cache = this.cache = this._poll();
			if(last == cache) {
				throw haxe_Exception.thrown("Polling loops on the same value");
			}
			last = cache;
			cache.b.handle($bind(this,this.resetCache));
			if(count++ >= 100) {
				throw haxe_Exception.thrown("Polling not concluded after 100 iterations");
			}
		}
		return this.cache;
	}
}
tink_state__$Observable_SimpleObservable.__name__ = true;
tink_state__$Observable_SimpleObservable.__interfaces__ = [tink_state_ObservableObject];
Object.assign(tink_state__$Observable_SimpleObservable.prototype, {
	__class__: tink_state__$Observable_SimpleObservable
	,_poll: null
	,cache: null
});
class tink_state__$Observable_AutoObservable extends tink_state__$Observable_SimpleObservable {
	constructor(comp) {
		tink_state__$Observable_SimpleObservable._hx_skip_constructor = true;
		super();
		tink_state__$Observable_SimpleObservable._hx_skip_constructor = false;
		this._hx_constructor(comp);
	}
	_hx_constructor(comp) {
		this.subscriptions = new haxe_ds_ObjectMap();
		let _gthis = this;
		super._hx_constructor(function() {
			_gthis.subscriptions = new haxe_ds_ObjectMap();
			_gthis.trigger = new tink_core_FutureTrigger();
			return new tink_core_MPair(comp.f(),_gthis.trigger);
		});
	}
	subscribe(change) {
		if(this.subscriptions.h.__keys__[change.__id__] == null) {
			this.subscriptions.set(change,change.handle(($_=this.trigger,$bind($_,$_.trigger))));
		}
	}
}
tink_state__$Observable_AutoObservable.__name__ = true;
tink_state__$Observable_AutoObservable.__super__ = tink_state__$Observable_SimpleObservable;
Object.assign(tink_state__$Observable_AutoObservable.prototype, {
	__class__: tink_state__$Observable_AutoObservable
	,trigger: null
	,subscriptions: null
});
class tink_core_FutureObject {
}
tink_core_FutureObject.__name__ = true;
tink_core_FutureObject.__isInterface__ = true;
Object.assign(tink_core_FutureObject.prototype, {
	__class__: tink_core_FutureObject
	,map: null
	,flatMap: null
	,handle: null
	,gather: null
	,eager: null
});
class tink_core_FutureTrigger {
	constructor() {
		this.list = new tink_core_CallbackList();
	}
	handle(callback) {
		let _g = this.list;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			let node = new tink_core__$Callback_ListCell(callback,_g);
			_g.cells.push(node);
			if(_g.used++ == 0) {
				_g.onfill();
			}
			return node;
		}
	}
	map(f) {
		if(this.list == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			let ret = new tink_core_FutureTrigger();
			let _this = this.list;
			let node = new tink_core__$Callback_ListCell(function(v) {
				ret.trigger(f(v));
			},_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				_this.onfill();
			}
			return ret;
		}
	}
	flatMap(f) {
		if(this.list == null) {
			return f(this.result);
		} else {
			let ret = new tink_core_FutureTrigger();
			let _this = this.list;
			let node = new tink_core__$Callback_ListCell(function(v) {
				f(v).handle($bind(ret,ret.trigger));
			},_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				_this.onfill();
			}
			return ret;
		}
	}
	gather() {
		return this;
	}
	eager() {
		return this;
	}
	trigger(result) {
		if(this.list == null) {
			return false;
		} else {
			let list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
}
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core_FutureObject];
Object.assign(tink_core_FutureTrigger.prototype, {
	__class__: tink_core_FutureTrigger
	,result: null
	,list: null
});
class tink_core_CallbackList {
	constructor() {
		this.busy = false;
		this.queue = [];
		this.used = 0;
		this.cells = [];
	}
	ondrain() {
	}
	onfill() {
	}
	invoke(data,destructive) {
		if(this.busy) {
			let _g = $bind(this,this.invoke);
			let data1 = data;
			let destructive1 = destructive;
			let tmp = function() {
				_g(data1,destructive1);
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			let length = this.cells.length;
			let _g = 0;
			while(_g < length) {
				let _this = this.cells[_g++];
				if(_this.list != null) {
					tink_core_Callback.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				let added = this.cells.length - length;
				let _g = 0;
				while(_g < length) {
					let _this = this.cells[_g++];
					_this.cb = null;
					_this.list = null;
				}
				let _g1 = 0;
				while(_g1 < added) {
					let i = _g1++;
					this.cells[i] = this.cells[length + i];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	compact() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			let compacted = 0;
			let _g = 0;
			let _g1 = this.cells.length;
			while(_g < _g1) {
				let i = _g++;
				let _g1 = this.cells[i];
				if(_g1.cb != null) {
					if(compacted != i) {
						this.cells[compacted] = _g1;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	resize(length) {
		this.cells.length = length;
	}
}
tink_core_CallbackList.__name__ = true;
Object.assign(tink_core_CallbackList.prototype, {
	__class__: tink_core_CallbackList
	,cells: null
	,used: null
	,queue: null
	,busy: null
});
class tink_core_MPair {
	constructor(a,b) {
		this.a = a;
		this.b = b;
	}
}
tink_core_MPair.__name__ = true;
Object.assign(tink_core_MPair.prototype, {
	__class__: tink_core_MPair
	,a: null
	,b: null
});
class tink_core_TypedError {
	constructor(code,message,pos) {
		if(code == null) {
			code = 500;
		}
		this.isTinkError = true;
		this.code = code;
		this.message = message;
		this.pos = pos;
		this.exceptionStack = [];
		this.callStack = [];
	}
	printPos() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	toString() {
		let ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	throwSelf() {
		throw haxe_Exception.thrown(this);
	}
	static withData(code,message,data,pos) {
		return tink_core_TypedError.typed(code,message,data,pos);
	}
	static typed(code,message,data,pos) {
		let ret = new tink_core_TypedError(code,message,pos);
		ret.data = data;
		return ret;
	}
	static asError(v) {
		if(v != null && v.isTinkError) {
			return v;
		} else {
			return null;
		}
	}
	static tryFinally(f,cleanup) {
		try { return f(); } finally { cleanup(); }
		return null;
	}
}
tink_core_TypedError.__name__ = true;
Object.assign(tink_core_TypedError.prototype, {
	__class__: tink_core_TypedError
	,message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,isTinkError: null
});
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
class tink_state_Transform {
	static plain(f) {
		return f;
	}
}
class HomePage extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		let _gthis = this;
		let this1 = { f : function() {
			let this1 = { f : function() {
				let this1 = { f : function() {
					let __r = [];
					let hxxMeta = { };
					__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H1,hxxMeta.ref,hxxMeta.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Hello, HaxeStack!",null)]));
					let hxxMeta1 = { };
					let __r1 = [];
					__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"An example of a full stack web app using ",null));
					let hxxMeta2 = { };
					__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta2.ref,hxxMeta2.key,{ href : "https://haxe.org/"},[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Haxe",null)]));
					__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta1.ref,hxxMeta1.key,{ },__r1));
					let hxxMeta3 = { };
					__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta3.ref,hxxMeta3.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Key libraries:",null)]));
					let hxxMeta4 = { };
					let __r2 = [];
					let hxxMeta5 = { };
					let hxxMeta6 = { };
					__r2.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LI,hxxMeta5.ref,hxxMeta5.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta6.ref,hxxMeta6.key,{ href : "https://haxetink.github.io/#/"},[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Tink",null)])]));
					let hxxMeta7 = { };
					let hxxMeta8 = { };
					__r2.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LI,hxxMeta7.ref,hxxMeta7.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta8.ref,hxxMeta8.key,{ href : "https://github.com/MVCoconut"},[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"MVCoconut",null)])]));
					let hxxMeta9 = { };
					let hxxMeta10 = { };
					__r2.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LI,hxxMeta9.ref,hxxMeta9.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta10.ref,hxxMeta10.key,{ href : "https://github.com/markknol/coconut.bootstrap"},[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Coconut Bootstrap",null)])]));
					let hxxMeta11 = { };
					__r2.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LI,hxxMeta11.ref,hxxMeta11.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Hawk",null)]));
					__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.UL,hxxMeta4.ref,hxxMeta4.key,{ },__r2));
					let hxxMeta12 = { };
					let __r3 = [];
					__r3.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"This frontend was compiled at ",null));
					let s = _gthis.compiledTime();
					__r3.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null));
					__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta12.ref,hxxMeta12.key,{ },__r3));
					let hxxMeta13 = { };
					let __r4 = [];
					__r4.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Still a work-in-progress. Check out our ",null));
					let hxxMeta14 = { };
					__r4.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta14.ref,hxxMeta14.key,{ href : "https://trello.com/b/ksjwsnyj/hellohaxestack"},[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Trello",null)]));
					__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta13.ref,hxxMeta13.key,{ },__r4));
					return __r;
				}};
				return [bootstrap_Jumbotron.fromHxx({ },{ children : tink_state_Observable.auto(this1)})];
			}};
			return [bootstrap_Row.fromHxx({ },{ children : tink_state_Observable.auto(this1)})];
		}};
		return bootstrap_Container.fromHxx({ },{ children : tink_state_Observable.auto(this1)});
	}
	compiledTime() {
		return DateTools.format(new Date(2021,1,13,21,51,7),"%H:%M:%S on %Y-%m-%d");
	}
	__initAttributes(attributes) {
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(HomePage.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
HomePage.__name__ = true;
HomePage.__super__ = coconut_vdom_View;
Object.assign(HomePage.prototype, {
	__class__: HomePage
});
class json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		this.errors = errors;
		this.putils = putils;
		this.errorType = errorType;
	}
	fromJson(jsonString,filename) {
		if(filename == null) {
			filename = "";
		}
		this.putils = new json2object_PositionUtils(jsonString);
		this.errors = [];
		try {
			this.loadJson(new hxjsonast_Parser(jsonString,filename).parseRec());
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxjsonast_Error)) {
				let e = _g1;
				this.errors.push(json2object_Error.ParserError(e.message,this.putils.convertPosition(e.pos)));
			} else {
				throw _g;
			}
		}
		return this.value;
	}
	loadJson(json,variable) {
		if(variable == null) {
			variable = "";
		}
		let pos = this.putils.convertPosition(json.pos);
		let _g = json.value;
		switch(_g._hx_index) {
		case 0:
			this.loadJsonString(_g.s,pos,variable);
			break;
		case 1:
			this.loadJsonNumber(_g.s,pos,variable);
			break;
		case 2:
			this.loadJsonObject(_g.fields,pos,variable);
			break;
		case 3:
			this.loadJsonArray(_g.values,pos,variable);
			break;
		case 4:
			this.loadJsonBool(_g.b,pos,variable);
			break;
		case 5:
			this.loadJsonNull(pos,variable);
			break;
		}
		return this.value;
	}
	loadJsonNull(pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadJsonString(s,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadJsonNumber(f,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadJsonInt(f,pos,variable,value) {
		if(Std.parseInt(f) != null && Std.parseInt(f) == parseFloat(f)) {
			return Std.parseInt(f);
		}
		this.onIncorrectType(pos,variable);
		return value;
	}
	loadJsonBool(b,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadJsonArray(a,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadJsonArrayValue(a,loadJsonFn,variable) {
		let _g = [];
		let _g1 = 0;
		while(_g1 < a.length) {
			let j = a[_g1++];
			let tmp;
			try {
				tmp = loadJsonFn(j,variable);
			} catch( _g ) {
				let _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,json2object_InternalError)) {
					let e = _g1;
					if(e != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e);
					}
					continue;
				} else {
					throw _g;
				}
			}
			_g.push(tmp);
		}
		return _g;
	}
	loadJsonObject(o,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadObjectField(loadJsonFn,field,name,assigned,defaultValue,pos) {
		try {
			let ret = loadJsonFn(field.value,field.name);
			this.mapSet(assigned,name,true);
			return ret;
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,json2object_InternalError)) {
				let e = _g1;
				if(e != json2object_InternalError.ParsingThrow) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				this.errors.push(json2object_Error.CustomFunctionException(_g1,pos));
			}
		}
		return defaultValue;
	}
	objectSetupAssign(assigned,keys,values) {
		let _g = 0;
		let _g1 = keys.length;
		while(_g < _g1) {
			let i = _g++;
			this.mapSet(assigned,keys[i],values[i]);
		}
	}
	objectErrors(assigned,pos) {
		let lastPos = this.putils.convertPosition(new hxjsonast_Position(pos.file,pos.max - 1,pos.max - 1));
		let s = haxe_ds_StringMap.keysIterator(assigned.h);
		while(s.hasNext()) {
			let s1 = s.next();
			if(!assigned.h[s1]) {
				this.errors.push(json2object_Error.UninitializedVariable(s1,lastPos));
			}
		}
	}
	onIncorrectType(pos,variable) {
		this.parsingThrow();
	}
	parsingThrow() {
		if(this.errorType != 0) {
			throw haxe_Exception.thrown(json2object_InternalError.ParsingThrow);
		}
	}
	mapSet(map,key,value) {
		map.h[key] = value;
	}
}
json2object_reader_BaseParser.__name__ = true;
Object.assign(json2object_reader_BaseParser.prototype, {
	__class__: json2object_reader_BaseParser
	,value: null
	,errors: null
	,errorType: null
	,putils: null
});
class JsonParser_$0 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<chirps.ChirpSimple>",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonArray(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$1(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
}
JsonParser_$0.__name__ = true;
JsonParser_$0.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$0.prototype, {
	__class__: JsonParser_$0
});
class JsonParser_$1 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"chirps.ChirpSimple",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		let assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["user","time","message"],[false,false,false]);
		this.value = this.getAuto();
		let _g = 0;
		while(_g < o.length) {
			let field = o[_g];
			++_g;
			switch(field.name) {
			case "message":
				this.value.message = this.loadObjectField(($_=new JsonParser_$2(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"message",assigned,this.value.message,pos);
				break;
			case "time":
				this.value.time = this.loadObjectField(($_=new JsonParser_$3(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"time",assigned,this.value.time,pos);
				break;
			case "user":
				this.value.user = this.loadObjectField(($_=new JsonParser_$2(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"user",assigned,this.value.user,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		let value = Object.create(chirps_ChirpSimple.prototype);
		value.user = new JsonParser_$2([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
		value.time = new JsonParser_$3([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
		value.message = new JsonParser_$2([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
		return value;
	}
}
JsonParser_$1.__name__ = true;
JsonParser_$1.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$1.prototype, {
	__class__: JsonParser_$1
});
class JsonParser_$2 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"String",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = s;
	}
}
JsonParser_$2.__name__ = true;
JsonParser_$2.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$2.prototype, {
	__class__: JsonParser_$2
});
class JsonParser_$3 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
		this.value = 0;
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Int",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNumber(f,pos,variable) {
		this.value = this.loadJsonInt(f,pos,variable,this.value);
	}
}
JsonParser_$3.__name__ = true;
JsonParser_$3.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$3.prototype, {
	__class__: JsonParser_$3
});
class Lambda {
	static exists(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) if(f(x.next())) {
			return true;
		}
		return false;
	}
}
Lambda.__name__ = true;
class Main {
	static main() {
		coconut_vdom_Renderer.mountInto(window.document.body.appendChild(window.document.createElement("div")),Root.fromHxx({ },{ }));
	}
}
Main.__name__ = true;
class MyRouter {
	static create() {
		return new coconut_router_BrowserRouter({ routeToLocation : MyRouter.routeToLocation, locationToRoute : function(url) {
			GlobalState.ensure().currentURL = url;
			let _g = tink_url_PortionArray.toStringArray(tink_url_Path.parts(url.path));
			switch(_g.length) {
			case 0:
				return Route.Home;
			case 1:
				let _g1 = _g[0];
				if(_g1 == null) {
					return Route.Unknown(url.path);
				} else {
					switch(_g1) {
					case "chirp":
						return Route.Chirp;
					case "test":
						return Route.APITest;
					default:
						return Route.Unknown(url.path);
					}
				}
				break;
			default:
				return Route.Unknown(url.path);
			}
		}});
	}
	static routeToLocation(route) {
		switch(route._hx_index) {
		case 0:
			return tink_Url.fromString("/");
		case 1:
			return tink_Url.fromString("/chirp");
		case 2:
			return tink_Url.fromString("/test");
		case 3:
			return tink_Url.fromString(route.path);
		}
	}
}
MyRouter.__name__ = true;
class tink_Url {
	static resolve(this1,that) {
		if(that.scheme != null) {
			return that;
		} else if(that.host != null) {
			if(that.scheme != null) {
				return that;
			} else {
				let copy = Reflect.copy(that);
				copy.scheme = this1.scheme;
				return copy;
			}
		} else {
			let parts = { path : tink_url_Path.join(this1.path,that.path), payload : "", scheme : this1.scheme, query : that.query, auth : this1.auth, host : this1.host, hash : that.hash};
			tink_Url.makePayload(parts);
			return parts;
		}
	}
	static makePayload(parts) {
		let payload = "";
		let _g = parts.host;
		let _g1 = parts.auth;
		if(_g1 == null) {
			if(_g != null) {
				payload = "" + ("//" + (_g == null ? "null" : _g));
			}
		} else if(_g == null) {
			payload = "" + ("//" + (_g1 == null ? "null" : _g1) + "@");
		} else {
			payload = "" + ("//" + (_g1 == null ? "null" : _g1) + "@" + (_g == null ? "null" : _g));
		}
		payload += parts.path == null ? "null" : parts.path;
		let _g2 = parts.query;
		if(_g2 != null) {
			payload += "?" + (_g2 == null ? "null" : _g2);
		}
		let _g3 = parts.hash;
		if(_g3 != null) {
			payload += "#" + _g3;
		}
		parts.payload = payload.toString();
	}
	static toString(this1) {
		if(this1.scheme == null) {
			return this1.payload;
		} else {
			return "" + this1.scheme + ":" + this1.payload;
		}
	}
	static fromString(s) {
		return tink_Url.parse(s);
	}
	static noop(_) {
	}
	static parse(s,onError) {
		while(true) {
			if(s == null) {
				s = "";
				onError = null;
				continue;
			}
			if(onError == null) {
				onError = tink_Url.noop;
			}
			s = StringTools.trim(s);
			if(StringTools.startsWith(s,"data:")) {
				return { scheme : "data", payload : HxOverrides.substr(s,5,null)};
			}
			let FORMAT = new EReg("^(([a-zA-Z][a-zA-Z0-9\\-+.]*):)?((//(([^@/]+)@)?([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?)$","");
			let HOST = new EReg("^(\\[(.*)\\]|([^:]*))(:(.*))?$","");
			FORMAT.match(s);
			let hosts;
			let _g = FORMAT.matched(7);
			if(_g == null) {
				hosts = [];
			} else {
				let _g1 = [];
				let _g2 = 0;
				let _g3 = _g.split(",");
				while(_g2 < _g3.length) {
					let host = _g3[_g2];
					++_g2;
					HOST.match(host);
					let host1;
					let _g = HOST.matched(2);
					let _g4 = HOST.matched(3);
					if(_g == null) {
						host1 = _g4;
					} else if(_g4 == null) {
						host1 = "[" + _g + "]";
					} else {
						onError("invalid host " + host);
						host1 = null;
					}
					let port;
					let _g5 = HOST.matched(5);
					if(_g5 == null) {
						port = null;
					} else {
						let _g = Std.parseInt(_g5);
						if(_g == null) {
							onError("invalid port " + _g5);
							port = null;
						} else {
							port = _g;
						}
					}
					_g1.push(tink_url_Host._new(host1,port));
				}
				hosts = _g1;
			}
			let path = FORMAT.matched(8);
			if(hosts.length > 0 && path.charAt(0) != "/") {
				path = "/" + path;
			}
			return { scheme : FORMAT.matched(2), payload : FORMAT.matched(3), host : hosts[0], hosts : hosts, auth : FORMAT.matched(6), path : tink_url_Path.ofString(path), query : FORMAT.matched(10), hash : FORMAT.matched(12)};
		}
	}
}
class StringTools {
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static endsWith(s,end) {
		let elen = end.length;
		let slen = s.length;
		if(slen >= elen) {
			return s.indexOf(end,slen - elen) == slen - elen;
		} else {
			return false;
		}
	}
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
}
StringTools.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		if(x != null) {
			let _g = 0;
			let _g1 = x.length;
			while(_g < _g1) {
				let i = _g++;
				let c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					let nc = x.charCodeAt(i + 1);
					let v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
	static random(x) {
		if(x <= 0) {
			return 0;
		} else {
			return Math.floor(Math.random() * x);
		}
	}
}
Std.__name__ = true;
class tink_url_Host {
	static _new(name,port) {
		let this1;
		if(port == null) {
			this1 = name;
		} else if(port > 65535 || port <= 0) {
			throw haxe_Exception.thrown("Invalid port");
		} else {
			this1 = "" + name + ":" + port;
		}
		return this1;
	}
}
class tink_url_Path {
	static parts(this1) {
		let _g = [];
		let _g1 = 0;
		let _g2 = this1.split("/");
		while(_g1 < _g2.length) {
			let p = _g2[_g1];
			++_g1;
			if(p != "") {
				_g.push(p);
			}
		}
		return _g;
	}
	static join(this1,that) {
		if(that == "") {
			return this1;
		} else if(that.charAt(0) == "/") {
			return that;
		} else if(this1.charAt(this1.length - 1) == "/") {
			return tink_url_Path.ofString(this1 + that);
		} else {
			let _g = this1.lastIndexOf("/");
			if(_g == -1) {
				return that;
			} else {
				return tink_url_Path.ofString(HxOverrides.substr(this1,0,_g + 1) + (that == null ? "null" : that));
			}
		}
	}
	static ofString(s) {
		return tink_url_Path.normalize(s);
	}
	static normalize(s) {
		s = StringTools.trim(StringTools.replace(s,"\\","/"));
		if(s == ".") {
			return "./";
		}
		let isDir = StringTools.endsWith(s,"/..") || StringTools.endsWith(s,"/") || StringTools.endsWith(s,"/.");
		let parts = [];
		let isAbsolute = StringTools.startsWith(s,"/");
		let up = 0;
		let _g = 0;
		let _g1 = s.split("/");
		while(_g < _g1.length) {
			let _g2 = StringTools.trim(_g1[_g++]);
			switch(_g2) {
			case "":
				break;
			case ".":
				break;
			case "..":
				if(parts.pop() == null) {
					++up;
				}
				break;
			default:
				parts.push(_g2);
			}
		}
		if(isAbsolute) {
			parts.unshift("");
		} else {
			let _g = 0;
			let _g1 = up;
			while(_g < _g1) {
				++_g;
				parts.unshift("..");
			}
		}
		if(isDir) {
			parts.push("");
		}
		return parts.join("/");
	}
}
class tink_url_PortionArray {
	static toStringArray(this1) {
		let _g = [];
		let _g1 = 0;
		while(_g1 < this1.length) _g.push(tink_url_Portion.toString(this1[_g1++]));
		return _g;
	}
}
class tink_url_Portion {
	static toString(this1) {
		if(this1 == null) {
			return null;
		} else {
			return decodeURIComponent(this1.split("+").join(" "));
		}
	}
}
var Route = $hxEnums["Route"] = { __ename__ : true, __constructs__ : ["Home","Chirp","APITest","Unknown"]
	,Home: {_hx_index:0,__enum__:"Route",toString:$estr}
	,Chirp: {_hx_index:1,__enum__:"Route",toString:$estr}
	,APITest: {_hx_index:2,__enum__:"Route",toString:$estr}
	,Unknown: ($_=function(path) { return {_hx_index:3,path:path,__enum__:"Route",toString:$estr}; },$_.__params__ = ["path"],$_)
};
class coconut_data_Model {
}
coconut_data_Model.__name__ = true;
coconut_data_Model.__isInterface__ = true;
class coconut_router_BrowserRouter {
	constructor(__coco_init) {
		this._updatePerformed = tink_core_Signal.trigger();
		this.annex = new coconut_data_helpers_Annex(this);
		let _gthis = this;
		this.locationToRoute = $bind(__coco_init,__coco_init.locationToRoute);
		this.routeToLocation = $bind(__coco_init,__coco_init.routeToLocation);
		this.__coco_route = tink_state_Observable.auto({ f : function() {
			return _gthis.locationToRoute(tink_state_Observable.get_value(spectatory_Location.href));
		}});
		let _g = $bind(__coco_init,__coco_init.isExternalLink);
		this.isExternalLink = _g == null ? function(href) {
			return href.indexOf("//") >= 0;
		} : _g;
		this.__coco_transitionCount = new tink_state__$State_SimpleState(0,null,null);
		this.errorTrigger = tink_core_Signal.trigger();
		this.transitionErrors = this.errorTrigger;
		this.observables = { locationToRoute : tink_state_Observable.const(this.locationToRoute), routeToLocation : tink_state_Observable.const(this.routeToLocation), route : this.__coco_route, isExternalLink : tink_state_Observable.const(this.isExternalLink), isInTransition : tink_state_Observable.map(this.__coco_transitionCount,tink_state_Transform.plain(function(count) {
			return count > 0;
		}))};
	}
	intercept(element) {
		if(element != null) {
			element.addEventListener("click",$bind(this,this.listener));
		}
	}
	pushUrl(url) {
		window.history.pushState(null,null,url);
	}
	listener(event) {
		let _g = event.target.closest("a");
		if(_g != null) {
			let _g1 = _g.getAttribute("href");
			if(_g1 != null) {
				if(!this.isExternalLink(_g1)) {
					event.preventDefault();
					this.pushUrl(_g1);
				}
			}
		}
	}
}
coconut_router_BrowserRouter.__name__ = true;
coconut_router_BrowserRouter.__interfaces__ = [coconut_data_Model];
Object.assign(coconut_router_BrowserRouter.prototype, {
	__class__: coconut_router_BrowserRouter
	,locationToRoute: null
	,routeToLocation: null
	,isExternalLink: null
	,__coco_route: null
	,_updatePerformed: null
	,observables: null
	,transitionErrors: null
	,errorTrigger: null
	,__coco_transitionCount: null
	,annex: null
});
class tink_core_Signal {
	static trigger() {
		return new tink_core_SignalTrigger();
	}
}
class tink_core_SignalObject {
}
tink_core_SignalObject.__name__ = true;
tink_core_SignalObject.__isInterface__ = true;
class tink_core_SignalTrigger {
	constructor() {
	}
}
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core_SignalTrigger.prototype, {
	__class__: tink_core_SignalTrigger
});
class coconut_data_helpers_Annex {
	constructor(target) {
		this.target = target;
		this.registry = new haxe_ds_ObjectMap();
	}
}
coconut_data_helpers_Annex.__name__ = true;
Object.assign(coconut_data_helpers_Annex.prototype, {
	__class__: coconut_data_helpers_Annex
	,target: null
	,registry: null
});
class haxe_IMap {
}
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
	,get: null
	,keys: null
	,keyValueIterator: null
});
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		let id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	get(key) {
		return this.h[key.__id__];
	}
	keys() {
		let a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
}
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
	,h: null
});
class tink_state__$State_StateObject {
}
tink_state__$State_StateObject.__name__ = true;
tink_state__$State_StateObject.__isInterface__ = true;
tink_state__$State_StateObject.__interfaces__ = [tink_state_ObservableObject];
Object.assign(tink_state__$State_StateObject.prototype, {
	__class__: tink_state__$State_StateObject
	,set: null
});
class tink_state__$State_SimpleState {
	constructor(value,isEqual,guard) {
		this.value = value;
		this.isEqual = isEqual;
		this.guard = guard;
		this.arm();
	}
	poll() {
		return this.next;
	}
	arm() {
		this.trigger = new tink_core_FutureTrigger();
		this.next = new tink_core_MPair(this.value,this.trigger);
	}
	set(value) {
		if(this.guard != null) {
			value = this.guard(value,this.value);
		}
		let b = this.value;
		if(this.isEqual == null ? value != b : !this.isEqual(value,b)) {
			this.value = value;
			let last = this.trigger;
			this.arm();
			last.trigger(tink_core_Noise.Noise);
		}
	}
}
tink_state__$State_SimpleState.__name__ = true;
tink_state__$State_SimpleState.__interfaces__ = [tink_state__$State_StateObject];
Object.assign(tink_state__$State_SimpleState.prototype, {
	__class__: tink_state__$State_SimpleState
	,next: null
	,trigger: null
	,isEqual: null
	,guard: null
	,value: null
});
class tink_pure_List {
	static first(this1,predicate) {
		let _g = new tink_pure_NodeIterator(this1);
		while(_g.list.length > 0) {
			let x = _g.next();
			if(predicate == null || predicate(x)) {
				return haxe_ds_Option.Some(x);
			}
		}
		return haxe_ds_Option.None;
	}
	static _new() {
		return null;
	}
	static append(this1,value) {
		if(this1 == null) {
			return new tink_pure__$List_Node(1,value);
		} else {
			return new tink_pure__$List_Node(this1.length + 1,this1.value,this1.tails.concat([new tink_pure__$List_Node(1,value)]));
		}
	}
	static prepend(this1,value) {
		if(this1 == null) {
			return new tink_pure__$List_Node(1,value);
		} else {
			return new tink_pure__$List_Node(this1.length + 1,value,[this1]);
		}
	}
	static replace(this1,select,generate) {
		let _g = [];
		let _g1 = new tink_pure_NodeIterator(this1);
		while(_g1.list.length > 0) {
			let v = _g1.next();
			if(select(v)) {
				_g.push(generate(v));
			} else {
				_g.push(v);
			}
		}
		return tink_pure_List.fromArray(_g);
	}
	static filter(this1,f) {
		if(this1 == null) {
			return null;
		} else {
			return this1.filter(f);
		}
	}
	static toArray(this1) {
		let _g = [];
		let _g1 = new tink_pure_NodeIterator(this1);
		while(_g1.list.length > 0) _g.push(_g1.next());
		return _g;
	}
	static fromArray(i) {
		let ret = null;
		let len = 0;
		let pos = i.length;
		while(pos-- > 0) ret = new tink_pure__$List_Node(++len,i[pos],ret == null ? tink_pure__$List_Node.EMPTY : [ret]);
		return ret;
	}
}
class tink_pure__$List_Node {
	constructor(length,value,tails) {
		this.value = value;
		this.length = length;
		this.tails = tails == null ? tink_pure__$List_Node.EMPTY : tails;
	}
	filter(f) {
		let iter = new tink_pure_NodeIterator(this);
		let ret = [];
		while(iter.list.length > 0) {
			let value = iter.next();
			let res = f(value);
			if(res > 0) {
				ret.push(value);
			}
			if((res & 3) == 3) {
				break;
			}
		}
		return tink_pure_List.fromArray(ret);
	}
}
tink_pure__$List_Node.__name__ = true;
Object.assign(tink_pure__$List_Node.prototype, {
	__class__: tink_pure__$List_Node
	,length: null
	,value: null
	,tails: null
});
class spectatory_Location {
}
spectatory_Location.__name__ = true;
class tink_core__$Future_SuspendableFuture {
	constructor(wakeup) {
		this.suspended = true;
		let _gthis = this;
		this.wakeup = wakeup;
		this.callbacks = new tink_core_CallbackList();
		this.callbacks.ondrain = function() {
			if(_gthis.callbacks != null) {
				_gthis.suspended = true;
				let this1 = _gthis.link;
				if(this1 != null) {
					this1.cancel();
				}
				_gthis.link = null;
			}
		};
	}
	trigger(value) {
		let _g = this.callbacks;
		if(_g != null) {
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			_g.invoke(value,true);
		}
	}
	handle(callback) {
		if(this.callbacks == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			let _this = this.callbacks;
			let node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				_this.onfill();
			}
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return node;
		}
	}
	map(f) {
		let _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return _gthis.handle(function(res) {
				$yield(f(res));
			});
		});
	}
	flatMap(f) {
		return tink_core_Future.flatten(this.map(f));
	}
	gather() {
		return this;
	}
	eager() {
		this.handle(tink_core_Callback.fromNiladic(function() {
		}));
		return this;
	}
}
tink_core__$Future_SuspendableFuture.__name__ = true;
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core_FutureObject];
Object.assign(tink_core__$Future_SuspendableFuture.prototype, {
	__class__: tink_core__$Future_SuspendableFuture
	,callbacks: null
	,result: null
	,suspended: null
	,link: null
	,wakeup: null
});
class tink_state_ConstObservable {
	constructor(value) {
		this.m = new tink_core_MPair(value,tink_state_ConstObservable.NEVER);
	}
	poll() {
		return this.m;
	}
}
tink_state_ConstObservable.__name__ = true;
tink_state_ConstObservable.__interfaces__ = [tink_state_ObservableObject];
Object.assign(tink_state_ConstObservable.prototype, {
	__class__: tink_state_ConstObservable
	,m: null
});
class Root extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.router = MyRouter.create();
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		let current = tink_Url.toString(this.router.routeToLocation(tink_state_Observable.get_value(this.router.__coco_route)));
		let hxxMeta = { ref : ($_=this.router,$bind($_,$_.intercept))};
		let __r = [];
		__r.push(NavBar.fromHxx({ },{ current : tink_state_Observable.auto({ f : function() {
			return current;
		}})}));
		let _g = tink_state_Observable.get_value(this.router.__coco_route);
		switch(_g._hx_index) {
		case 0:
			__r.push(HomePage.fromHxx({ },{ }));
			break;
		case 1:
			__r.push(chirps_ChirpPage.fromHxx({ },{ }));
			break;
		case 2:
			__r.push(general_$tools_apitest_APITester.fromHxx({ },{ }));
			break;
		case 3:
			let v = _g.path;
			__r.push(UnknownPage.fromHxx({ },{ path : tink_state_Observable.auto({ f : function() {
				return v;
			}})}));
			break;
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	__initAttributes(attributes) {
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(Root.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
Root.__name__ = true;
Root.__super__ = coconut_vdom_View;
Object.assign(Root.prototype, {
	__class__: Root
	,router: null
});
Math.__name__ = true;
class coconut_ui_tools_Slot {
	constructor(owner,compare,defaultData) {
		this.owner = owner;
		this.compare = compare == null ? function(a,b) {
			return a == b;
		} : compare;
		this.data = this.defaultData = defaultData;
	}
	poll() {
		let _gthis = this;
		if(this.last == null) {
			if(this.data == null) {
				this.last = new tink_core_MPair(null,new tink_core_FutureTrigger());
			} else {
				this.link = null;
				let m = tink_state_Observable.measure(this.data);
				let changed = new tink_core_FutureTrigger();
				let dFault = null;
				let a;
				let _g = m.a;
				if(_g == null && this.defaultData != null) {
					dFault = tink_state_Observable.measure(this.defaultData);
					a = dFault.a;
				} else {
					a = _g;
				}
				this.last = new tink_core_MPair(a,changed);
				this.link = m.b.handle($bind(changed,changed.trigger));
				if(dFault != null) {
					this.link = new tink_core__$Callback_LinkPair(this.link,dFault.b.handle($bind(changed,changed.trigger)));
				}
			}
			this.last.b.handle(tink_core_Callback.fromNiladic(function() {
				_gthis.last = null;
			}));
		}
		return new tink_core_MPair(this.last.a,this.last.b);
	}
	setData(data) {
		if(data == null) {
			data = this.defaultData;
		}
		if(data == this.data) {
			return;
		}
		this.data = data;
		if(this.last != null) {
			let this1 = this.link;
			if(this1 != null) {
				this1.cancel();
			}
			if(data != null) {
				let _e = data;
				let m = tink_state_Observable.untracked(function() {
					return tink_state_Observable.measure(_e);
				});
				if(this.compare(m.a,this.last.a)) {
					this.link = m.b.handle(($_=this.last.b,$bind($_,$_.trigger)));
				} else {
					this.last.b.trigger(tink_core_Noise.Noise);
				}
			}
		}
	}
}
coconut_ui_tools_Slot.__name__ = true;
coconut_ui_tools_Slot.__interfaces__ = [tink_state_ObservableObject];
Object.assign(coconut_ui_tools_Slot.prototype, {
	__class__: coconut_ui_tools_Slot
	,defaultData: null
	,data: null
	,last: null
	,link: null
	,owner: null
	,compare: null
});
class NavBar extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_current = new coconut_ui_tools_Slot(this,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		let _gthis = this;
		tink_state_Observable.get_value(this.__coco_current);
		let hxxMeta = { };
		let attr = { className : tink_domspec_ClassName.ofString("navbar navbar-expand-md navbar-dark bg-dark")};
		let __r = [];
		let hxxMeta1 = { };
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta1.ref,hxxMeta1.key,{ className : tink_domspec_ClassName.ofString("navbar-brand"), href : "#"},[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Navbar",null)]));
		let hxxMeta2 = { };
		let hxxMeta3 = { };
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BUTTON,hxxMeta2.ref,hxxMeta2.key,{ className : tink_domspec_ClassName.ofString("navbar-toggler"), type : "button", attributes : { "data-toggle" : "collapse", "data-target" : "#navbarSupportedContent", "aria-controls" : "navbarSupportedContent", "aria-expanded" : "false", "aria-label" : "Toggle navigation"}},[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SPAN,hxxMeta3.ref,hxxMeta3.key,{ className : tink_domspec_ClassName.ofString("navbar-toggler-icon")},[])]));
		let hxxMeta4 = { };
		let attr1 = { className : tink_domspec_ClassName.ofString("collapse navbar-collapse"), id : "navbarSupportedContent"};
		let hxxMeta5 = { };
		let attr2 = { className : tink_domspec_ClassName.ofString("navbar-nav mr-auto")};
		let __r1 = [];
		let this1 = { f : function() {
			return tink_state_Observable.get_value(_gthis.__coco_current);
		}};
		__r1.push(NavItem.fromHxx({ },{ text : tink_state_Observable.const("Home"), link : tink_state_Observable.const("/"), current : tink_state_Observable.auto(this1)}));
		let this2 = { f : function() {
			return tink_state_Observable.get_value(_gthis.__coco_current);
		}};
		__r1.push(NavItem.fromHxx({ },{ text : tink_state_Observable.const("Chirp"), link : tink_state_Observable.const("/chirp"), current : tink_state_Observable.auto(this2)}));
		let this3 = { f : function() {
			return tink_state_Observable.get_value(_gthis.__coco_current);
		}};
		__r1.push(NavItem.fromHxx({ },{ text : tink_state_Observable.const("API Tester"), link : tink_state_Observable.const("/test"), current : tink_state_Observable.auto(this3)}));
		let this4 = { f : function() {
			return tink_state_Observable.get_value(_gthis.__coco_current);
		}};
		__r1.push(NavItem.fromHxx({ },{ text : tink_state_Observable.const("Other"), link : tink_state_Observable.const("/other"), current : tink_state_Observable.auto(this4)}));
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta4.ref,hxxMeta4.key,attr1,[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.UL,hxxMeta5.ref,hxxMeta5.key,attr2,__r1)]));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.NAV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	__initAttributes(attributes) {
		this.__coco_current.setData(attributes.current);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(NavBar.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
NavBar.__name__ = true;
NavBar.__super__ = coconut_vdom_View;
Object.assign(NavBar.prototype, {
	__class__: NavBar
	,__coco_current: null
});
class NavItem extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_text = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_link = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_current = new coconut_ui_tools_Slot(this,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	cls() {
		if(tink_state_Observable.get_value(this.__coco_link) == tink_state_Observable.get_value(this.__coco_current)) {
			return "nav-item active";
		}
		return "nav-item";
	}
	render() {
		let hxxMeta = { };
		let attr = { className : tink_domspec_ClassName.ofString(this.cls())};
		let hxxMeta1 = { };
		let attr1 = { className : tink_domspec_ClassName.ofString("nav-link"), href : tink_state_Observable.get_value(this.__coco_link)};
		let s = tink_state_Observable.get_value(this.__coco_text);
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LI,hxxMeta.ref,hxxMeta.key,attr,[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta1.ref,hxxMeta1.key,attr1,[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null)])]);
	}
	__initAttributes(attributes) {
		this.__coco_text.setData(attributes.text);
		this.__coco_link.setData(attributes.link);
		this.__coco_current.setData(attributes.current);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(NavItem.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
NavItem.__name__ = true;
NavItem.__super__ = coconut_vdom_View;
Object.assign(NavItem.prototype, {
	__class__: NavItem
	,__coco_text: null
	,__coco_link: null
	,__coco_current: null
});
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			return null;
		}
	}
	static fields(o) {
		let a = [];
		if(o != null) {
			let hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
	static compare(a,b) {
		if(a == b) {
			return 0;
		} else if(a > b) {
			return 1;
		} else {
			return -1;
		}
	}
	static compareMethods(f1,f2) {
		if(f1 == f2) {
			return true;
		}
		if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
			return false;
		}
		if(f1.scope == f2.scope && f1.method == f2.method) {
			return f1.method != null;
		} else {
			return false;
		}
	}
	static isEnumValue(v) {
		if(v != null) {
			return v.__enum__ != null;
		} else {
			return false;
		}
	}
	static copy(o) {
		if(o == null) {
			return null;
		}
		let o2 = { };
		let _g = 0;
		let _g1 = Reflect.fields(o);
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			o2[f] = Reflect.field(o,f);
		}
		return o2;
	}
}
Reflect.__name__ = true;
class StringBuf {
	constructor() {
		this.b = "";
	}
}
StringBuf.__name__ = true;
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
	,b: null
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
class Type {
	static getInstanceFields(c) {
		let result = [];
		while(c != null) {
			let _g = 0;
			let _g1 = Object.getOwnPropertyNames(c.prototype);
			while(_g < _g1.length) {
				let name = _g1[_g];
				++_g;
				switch(name) {
				case "__class__":case "__properties__":case "constructor":
					break;
				default:
					if(result.indexOf(name) == -1) {
						result.push(name);
					}
				}
			}
			c = c.__super__;
		}
		return result;
	}
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			let e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			let c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
	static enumParameters(e) {
		let enm = $hxEnums[e.__enum__];
		let ctorName = enm.__constructs__[e._hx_index];
		let params = enm[ctorName].__params__;
		if(params != null) {
			let _g = [];
			let _g1 = 0;
			while(_g1 < params.length) {
				let p = params[_g1];
				++_g1;
				_g.push(e[p]);
			}
			return _g;
		} else {
			return [];
		}
	}
}
Type.__name__ = true;
class UnknownPage extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_path = new coconut_ui_tools_Slot(this,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		let hxxMeta = { };
		let __r = [];
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Page not found: ",null));
		let s = tink_state_Observable.get_value(this.__coco_path);
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	__initAttributes(attributes) {
		this.__coco_path.setData(attributes.path);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(UnknownPage.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
UnknownPage.__name__ = true;
UnknownPage.__super__ = coconut_vdom_View;
Object.assign(UnknownPage.prototype, {
	__class__: UnknownPage
	,__coco_path: null
});
class bootstrap_Bootstrap {
	static create(className,children) {
		let hxxMeta = { };
		let __r = [];
		let _g = 0;
		while(_g < (children == null ? 0 : children.length)) {
			let _0 = children == null ? null : children[_g];
			++_g;
			__r.push(_0);
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ className : className},__r);
	}
}
bootstrap_Bootstrap.__name__ = true;
var bootstrap_ButtonType = $hxEnums["bootstrap.ButtonType"] = { __ename__ : true, __constructs__ : ["Default","Reset","Input","Submit"]
	,Default: {_hx_index:0,__enum__:"bootstrap.ButtonType",toString:$estr}
	,Reset: {_hx_index:1,__enum__:"bootstrap.ButtonType",toString:$estr}
	,Input: {_hx_index:2,__enum__:"bootstrap.ButtonType",toString:$estr}
	,Submit: {_hx_index:3,__enum__:"bootstrap.ButtonType",toString:$estr}
};
class bootstrap_Button extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_variant = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return "primary";
		}}));
		this.__coco_size = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return "md";
		}}));
		this.__coco_block = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
		this.__coco_active = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
		this.__coco_disabled = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
		this.__coco_href = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_type = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return bootstrap_ButtonType.Default;
		}}));
		this.__coco_onclick = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return function(e) {
			};
		}}));
		this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_children = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_label = new coconut_ui_tools_Slot(this,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	onclick(e) {
		(tink_state_Observable.get_value(this.__coco_onclick))(e);
	}
	render() {
		let _gthis = this;
		let classes = tink_state_Observable.get_value(this.__coco_className);
		let _g = new haxe_ds_StringMap();
		_g.h["btn"] = true;
		let key = "btn" + "-" + tink_state_Observable.get_value(this.__coco_variant);
		_g.h[key] = true;
		let key1 = "btn" + "-" + tink_state_Observable.get_value(this.__coco_size);
		let value = tink_state_Observable.get_value(this.__coco_size) != null;
		_g.h[key1] = value;
		let value1 = tink_state_Observable.get_value(this.__coco_block);
		_g.h["btn" + "-block"] = value1;
		let value2 = tink_state_Observable.get_value(this.__coco_disabled);
		_g.h["btn" + "-disabled"] = value2;
		let value3 = tink_state_Observable.get_value(this.__coco_active);
		_g.h["active"] = value3;
		let classes1 = tink_domspec_ClassName.add(classes,tink_domspec_ClassName.ofMap(_g));
		if(tink_state_Observable.get_value(this.__coco_href) == null) {
			switch(tink_state_Observable.get_value(this.__coco_type)._hx_index) {
			case 0:
				let hxxMeta = { };
				let attr = { type : "button", disabled : tink_state_Observable.get_value(this.__coco_disabled), className : classes1, onclick : $bind(_gthis,_gthis.onclick)};
				let __r = [];
				let _g1 = 0;
				let _g2 = tink_state_Observable.get_value(this.__coco_children);
				while(_g1 < (_g2 == null ? 0 : _g2.length)) {
					let _0 = _g2 == null ? null : _g2[_g1];
					++_g1;
					__r.push(_0);
				}
				return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BUTTON,hxxMeta.ref,hxxMeta.key,attr,__r);
			case 1:
				let hxxMeta1 = { };
				let attr1 = { type : "reset", disabled : tink_state_Observable.get_value(this.__coco_disabled), className : classes1, onclick : $bind(_gthis,_gthis.onclick), value : tink_state_Observable.get_value(this.__coco_label)};
				return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INPUT,hxxMeta1.ref,hxxMeta1.key,attr1,null);
			case 2:
				let hxxMeta2 = { };
				let attr2 = { type : "input", disabled : tink_state_Observable.get_value(this.__coco_disabled), className : classes1, onclick : $bind(_gthis,_gthis.onclick), value : tink_state_Observable.get_value(this.__coco_label)};
				return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INPUT,hxxMeta2.ref,hxxMeta2.key,attr2,null);
			case 3:
				let hxxMeta3 = { };
				let attr3 = { type : "submit", disabled : tink_state_Observable.get_value(this.__coco_disabled), className : classes1, onclick : $bind(_gthis,_gthis.onclick), value : tink_state_Observable.get_value(this.__coco_label)};
				return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INPUT,hxxMeta3.ref,hxxMeta3.key,attr3,null);
			}
		} else {
			let hxxMeta = { };
			let attr = { href : tink_state_Observable.get_value(this.__coco_href), className : classes1};
			let __r = [];
			let _g = 0;
			let _g1 = tink_state_Observable.get_value(this.__coco_children);
			while(_g < (_g1 == null ? 0 : _g1.length)) {
				let _0 = _g1 == null ? null : _g1[_g];
				++_g;
				__r.push(_0);
			}
			return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta.ref,hxxMeta.key,attr,__r);
		}
	}
	__initAttributes(attributes) {
		this.__coco_variant.setData(attributes.variant);
		this.__coco_size.setData(attributes.size);
		this.__coco_block.setData(attributes.block);
		this.__coco_active.setData(attributes.active);
		this.__coco_disabled.setData(attributes.disabled);
		this.__coco_href.setData(attributes.href);
		this.__coco_type.setData(attributes.type);
		this.__coco_onclick.setData(attributes.onclick);
		this.__coco_className.setData(attributes.className);
		this.__coco_children.setData(attributes.children);
		this.__coco_label.setData(attributes.label);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(bootstrap_Button.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
bootstrap_Button.__name__ = true;
bootstrap_Button.__super__ = coconut_vdom_View;
Object.assign(bootstrap_Button.prototype, {
	__class__: bootstrap_Button
	,__coco_variant: null
	,__coco_size: null
	,__coco_block: null
	,__coco_active: null
	,__coco_disabled: null
	,__coco_href: null
	,__coco_type: null
	,__coco_onclick: null
	,__coco_className: null
	,__coco_children: null
	,__coco_label: null
});
class bootstrap_Container extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_children = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_size = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_fluid = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		let hxxMeta = { };
		let attr = tink_state_Observable.get_value(this.__coco_className);
		let _g = new haxe_ds_StringMap();
		let value = !tink_state_Observable.get_value(this.__coco_fluid) && tink_state_Observable.get_value(this.__coco_size) == null;
		_g.h["container"] = value;
		let value1 = tink_state_Observable.get_value(this.__coco_fluid);
		_g.h["container" + "-fluid"] = value1;
		let key = "container" + "-" + tink_state_Observable.get_value(this.__coco_size);
		let value2 = tink_state_Observable.get_value(this.__coco_size) != null;
		_g.h[key] = value2;
		let attr1 = { className : tink_domspec_ClassName.add(attr,tink_domspec_ClassName.ofMap(_g))};
		let __r = [];
		let _g1 = 0;
		let _g2 = tink_state_Observable.get_value(this.__coco_children);
		while(_g1 < (_g2 == null ? 0 : _g2.length)) {
			let _0 = _g2 == null ? null : _g2[_g1];
			++_g1;
			__r.push(_0);
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr1,__r);
	}
	__initAttributes(attributes) {
		this.__coco_children.setData(attributes.children);
		this.__coco_className.setData(attributes.className);
		this.__coco_size.setData(attributes.size);
		this.__coco_fluid.setData(attributes.fluid);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(bootstrap_Container.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
bootstrap_Container.__name__ = true;
bootstrap_Container.__super__ = coconut_vdom_View;
Object.assign(bootstrap_Container.prototype, {
	__class__: bootstrap_Container
	,__coco_children: null
	,__coco_className: null
	,__coco_size: null
	,__coco_fluid: null
});
class bootstrap_Row extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_children = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		return bootstrap_Bootstrap.create(tink_domspec_ClassName.add(tink_state_Observable.get_value(this.__coco_className),tink_domspec_ClassName.ofString("row")),tink_state_Observable.get_value(this.__coco_children));
	}
	__initAttributes(attributes) {
		this.__coco_children.setData(attributes.children);
		this.__coco_className.setData(attributes.className);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(bootstrap_Row.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
bootstrap_Row.__name__ = true;
bootstrap_Row.__super__ = coconut_vdom_View;
Object.assign(bootstrap_Row.prototype, {
	__class__: bootstrap_Row
	,__coco_children: null
	,__coco_className: null
});
class bootstrap_Col extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_noGutters = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
		this.__coco_children = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		let hxxMeta = { };
		let attr = tink_state_Observable.get_value(this.__coco_className);
		let _g = new haxe_ds_StringMap();
		_g.h["col"] = true;
		let value = tink_state_Observable.get_value(this.__coco_noGutters);
		_g.h["noGutters"] = value;
		let attr1 = { className : tink_domspec_ClassName.add(attr,tink_domspec_ClassName.ofMap(_g))};
		let __r = [];
		let _g1 = 0;
		let _g2 = tink_state_Observable.get_value(this.__coco_children);
		while(_g1 < (_g2 == null ? 0 : _g2.length)) {
			let _0 = _g2 == null ? null : _g2[_g1];
			++_g1;
			__r.push(_0);
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr1,__r);
	}
	__initAttributes(attributes) {
		this.__coco_noGutters.setData(attributes.noGutters);
		this.__coco_children.setData(attributes.children);
		this.__coco_className.setData(attributes.className);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(bootstrap_Col.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
bootstrap_Col.__name__ = true;
bootstrap_Col.__super__ = coconut_vdom_View;
Object.assign(bootstrap_Col.prototype, {
	__class__: bootstrap_Col
	,__coco_noGutters: null
	,__coco_children: null
	,__coco_className: null
});
class bootstrap_Jumbotron extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_children = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_fluid = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		let hxxMeta = { };
		let attr = tink_state_Observable.get_value(this.__coco_className);
		let _g = new haxe_ds_StringMap();
		_g.h["" + bootstrap_Jumbotron.prefix] = true;
		let value = tink_state_Observable.get_value(this.__coco_fluid);
		_g.h["" + bootstrap_Jumbotron.prefix + "-fluid"] = value;
		let attr1 = { className : tink_domspec_ClassName.add(attr,tink_domspec_ClassName.ofMap(_g))};
		let __r = [];
		let _g1 = 0;
		let _g2 = tink_state_Observable.get_value(this.__coco_children);
		while(_g1 < (_g2 == null ? 0 : _g2.length)) {
			let _0 = _g2 == null ? null : _g2[_g1];
			++_g1;
			__r.push(_0);
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr1,__r);
	}
	__initAttributes(attributes) {
		this.__coco_children.setData(attributes.children);
		this.__coco_className.setData(attributes.className);
		this.__coco_fluid.setData(attributes.fluid);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(bootstrap_Jumbotron.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
bootstrap_Jumbotron.__name__ = true;
bootstrap_Jumbotron.__super__ = coconut_vdom_View;
Object.assign(bootstrap_Jumbotron.prototype, {
	__class__: bootstrap_Jumbotron
	,__coco_children: null
	,__coco_className: null
	,__coco_fluid: null
});
class tink_domspec_ClassName {
	static add(this1,that) {
		let _g = that;
		return this1 == null ? _g : _g == null ? this1 : "" + this1 + " " + _g;
	}
	static ofMap(parts) {
		let _g = [];
		let c = haxe_ds_StringMap.keysIterator(parts.h);
		while(c.hasNext()) {
			let c1 = c.next();
			if(parts.h[c1]) {
				_g.push(tink_domspec_ClassName.ofString(c1));
			}
		}
		return tink_domspec_ClassName.ofArray(_g);
	}
	static ofArray(parts) {
		let f = tink_domspec_ClassName.ofString;
		let result = new Array(parts.length);
		let _g = 0;
		let _g1 = parts.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = f(parts[i]);
		}
		return result.join(" ");
	}
	static ofString(s) {
		if(s == null) {
			return null;
		} else {
			return StringTools.trim(s);
		}
	}
}
var coconut_diffing_VNodeData = $hxEnums["coconut.diffing.VNodeData"] = { __ename__ : true, __constructs__ : ["VNativeInst","VWidgetInst","VMany","VNative","VWidget"]
	,VNativeInst: ($_=function(n) { return {_hx_index:0,n:n,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["n"],$_)
	,VWidgetInst: ($_=function(w) { return {_hx_index:1,w:w,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["w"],$_)
	,VMany: ($_=function(nodes) { return {_hx_index:2,nodes:nodes,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["nodes"],$_)
	,VNative: ($_=function(type,ref,key,a,children) { return {_hx_index:3,type:type,ref:ref,key:key,a:a,children:children,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["type","ref","key","a","children"],$_)
	,VWidget: ($_=function(type,ref,key,a) { return {_hx_index:4,type:type,ref:ref,key:key,a:a,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["type","ref","key","a"],$_)
};
class coconut_diffing_NodeType {
}
coconut_diffing_NodeType.__name__ = true;
coconut_diffing_NodeType.__isInterface__ = true;
Object.assign(coconut_diffing_NodeType.prototype, {
	__class__: coconut_diffing_NodeType
	,create: null
	,update: null
});
class coconut_vdom__$Html_Elt {
	constructor(tag) {
		let _g = tag.split(":");
		let tmp;
		if(_g.length == 2) {
			let _g1 = _g[1];
			this.ns = coconut_vdom__$Html_Elt.namespaces.h[_g[0]];
			tmp = _g1;
		} else {
			tmp = tag;
		}
		this.tag = tmp;
	}
	create(attr) {
		let ret = this.ns == null ? window.document.createElement(this.tag) : window.document.createElementNS(this.ns,this.tag);
		let newProps = attr;
		let oldProps = null;
		let updateProp = this.ns == "http://www.w3.org/2000/svg" ? coconut_vdom__$Html_Elt.setSvgProp : coconut_vdom__$Html_Elt.setProp;
		if(newProps != oldProps) {
			let keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			}
			let _g = 0;
			let _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				let key = _g1[_g];
				++_g;
				let _g2 = oldProps[key];
				let _g3 = newProps[key];
				if(_g3 == null) {
					if(_g3 != _g2) {
						updateProp(ret,key,_g3,_g2);
					}
				} else if(_g3 != _g2) {
					updateProp(ret,key,_g3,_g2);
				}
			}
		}
		return ret;
	}
	update(target,old,nu) {
		let newProps = nu;
		let oldProps = old;
		let updateProp = target.namespaceURI == "http://www.w3.org/2000/svg" ? coconut_vdom__$Html_Elt.setSvgProp : coconut_vdom__$Html_Elt.setProp;
		if(newProps != oldProps) {
			let keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else if(oldProps == null) {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			} else {
				let ret = Reflect.copy(newProps);
				let _g = 0;
				let _g1 = Reflect.fields(oldProps);
				while(_g < _g1.length) ret[_g1[_g++]] = true;
				keys = ret;
			}
			let _g = 0;
			let _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				let key = _g1[_g];
				++_g;
				let _g2 = oldProps[key];
				let _g3 = newProps[key];
				if(_g3 == null) {
					if(_g3 != _g2) {
						updateProp(target,key,_g3,_g2);
					}
				} else if(_g3 != _g2) {
					updateProp(target,key,_g3,_g2);
				}
			}
		}
	}
	static setSvgProp(element,name,newVal,oldVal) {
		switch(name) {
		case "className":case "viewBox":
			if(newVal == null) {
				element.removeAttributeNS("http://www.w3.org/2000/svg",name);
			} else {
				element.setAttributeNS("http://www.w3.org/2000/svg",name,newVal);
			}
			break;
		case "xmlns":
			break;
		default:
			if(name in element) {
				switch(name) {
				case "attributes":
					let newProps = newVal;
					let oldProps = oldVal;
					let updateProp = coconut_vdom__$Html_Elt.updateAttribute;
					if(newProps != oldProps) {
						let keys;
						if(newProps == null) {
							newProps = coconut_diffing_Differ.EMPTY;
							keys = oldProps;
						} else if(oldProps == null) {
							oldProps = coconut_diffing_Differ.EMPTY;
							keys = newProps;
						} else {
							let ret = Reflect.copy(newProps);
							let _g = 0;
							let _g1 = Reflect.fields(oldProps);
							while(_g < _g1.length) {
								let key = _g1[_g];
								++_g;
								ret[key] = true;
							}
							keys = ret;
						}
						let _g = 0;
						let _g1 = Reflect.fields(keys);
						while(_g < _g1.length) {
							let key = _g1[_g];
							++_g;
							let _g2 = oldProps[key];
							let _g3 = newProps[key];
							if(_g3 == null) {
								let b = _g2;
								let a = _g3;
								if(a != b) {
									let old = _g2;
									let nu = _g3;
									updateProp(element,key,nu,old);
								}
							} else {
								let b = _g2;
								let a = _g3;
								if(a != b) {
									let old = _g2;
									let nu = _g3;
									updateProp(element,key,nu,old);
								}
							}
						}
					}
					break;
				case "className":
					if(!newVal) {
						element.removeAttribute("class");
					} else if(newVal == null) {
						if(element.hasAttribute(name)) {
							element.removeAttribute(name);
						} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
							element[name] = null;
						} else {
							delete element[name];
						}
					} else {
						element[name] = newVal;
					}
					break;
				case "style":
					let target = element.style;
					let newProps1 = newVal;
					let oldProps1 = oldVal;
					let updateProp1 = coconut_vdom__$Html_Elt.setStyle;
					if(newProps1 != oldProps1) {
						let keys;
						if(newProps1 == null) {
							newProps1 = coconut_diffing_Differ.EMPTY;
							keys = oldProps1;
						} else if(oldProps1 == null) {
							oldProps1 = coconut_diffing_Differ.EMPTY;
							keys = newProps1;
						} else {
							let ret = Reflect.copy(newProps1);
							let _g = 0;
							let _g1 = Reflect.fields(oldProps1);
							while(_g < _g1.length) {
								let key = _g1[_g];
								++_g;
								ret[key] = true;
							}
							keys = ret;
						}
						let _g = 0;
						let _g1 = Reflect.fields(keys);
						while(_g < _g1.length) {
							let key = _g1[_g];
							++_g;
							let _g2 = oldProps1[key];
							let _g3 = newProps1[key];
							if(_g3 == null) {
								let b = _g2;
								let a = _g3;
								if(a != b) {
									let old = _g2;
									let nu = _g3;
									updateProp1(target,key,nu,old);
								}
							} else {
								let b = _g2;
								let a = _g3;
								if(a != b) {
									let old = _g2;
									let nu = _g3;
									updateProp1(target,key,nu,old);
								}
							}
						}
					}
					break;
				default:
					if(newVal == null) {
						if(element.hasAttribute(name)) {
							element.removeAttribute(name);
						} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
							element[name] = null;
						} else {
							delete element[name];
						}
					} else {
						element[name] = newVal;
					}
				}
			} else if(newVal == null) {
				element.removeAttribute(name);
			} else {
				element.setAttribute(name,newVal);
			}
		}
	}
	static setStyle(target,name,newVal,oldVal) {
		target[name] = newVal == null ? null : newVal;
	}
	static setProp(element,name,newVal,oldVal) {
		switch(name) {
		case "attributes":
			let newProps = newVal;
			let oldProps = oldVal;
			let updateProp = coconut_vdom__$Html_Elt.updateAttribute;
			if(newProps != oldProps) {
				let keys;
				if(newProps == null) {
					newProps = coconut_diffing_Differ.EMPTY;
					keys = oldProps;
				} else if(oldProps == null) {
					oldProps = coconut_diffing_Differ.EMPTY;
					keys = newProps;
				} else {
					let ret = Reflect.copy(newProps);
					let _g = 0;
					let _g1 = Reflect.fields(oldProps);
					while(_g < _g1.length) {
						let key = _g1[_g];
						++_g;
						ret[key] = true;
					}
					keys = ret;
				}
				let _g = 0;
				let _g1 = Reflect.fields(keys);
				while(_g < _g1.length) {
					let key = _g1[_g];
					++_g;
					let _g2 = oldProps[key];
					let _g3 = newProps[key];
					if(_g3 == null) {
						let b = _g2;
						let a = _g3;
						if(a != b) {
							let old = _g2;
							let nu = _g3;
							updateProp(element,key,nu,old);
						}
					} else {
						let b = _g2;
						let a = _g3;
						if(a != b) {
							let old = _g2;
							let nu = _g3;
							updateProp(element,key,nu,old);
						}
					}
				}
			}
			break;
		case "className":
			if(!newVal) {
				element.removeAttribute("class");
			} else if(newVal == null) {
				if(element.hasAttribute(name)) {
					element.removeAttribute(name);
				} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
					element[name] = null;
				} else {
					delete element[name];
				}
			} else {
				element[name] = newVal;
			}
			break;
		case "style":
			let target = element.style;
			let newProps1 = newVal;
			let oldProps1 = oldVal;
			let updateProp1 = coconut_vdom__$Html_Elt.setStyle;
			if(newProps1 != oldProps1) {
				let keys;
				if(newProps1 == null) {
					newProps1 = coconut_diffing_Differ.EMPTY;
					keys = oldProps1;
				} else if(oldProps1 == null) {
					oldProps1 = coconut_diffing_Differ.EMPTY;
					keys = newProps1;
				} else {
					let ret = Reflect.copy(newProps1);
					let _g = 0;
					let _g1 = Reflect.fields(oldProps1);
					while(_g < _g1.length) {
						let key = _g1[_g];
						++_g;
						ret[key] = true;
					}
					keys = ret;
				}
				let _g = 0;
				let _g1 = Reflect.fields(keys);
				while(_g < _g1.length) {
					let key = _g1[_g];
					++_g;
					let _g2 = oldProps1[key];
					let _g3 = newProps1[key];
					if(_g3 == null) {
						let b = _g2;
						let a = _g3;
						if(a != b) {
							let old = _g2;
							let nu = _g3;
							updateProp1(target,key,nu,old);
						}
					} else {
						let b = _g2;
						let a = _g3;
						if(a != b) {
							let old = _g2;
							let nu = _g3;
							updateProp1(target,key,nu,old);
						}
					}
				}
			}
			break;
		default:
			if(newVal == null) {
				if(element.hasAttribute(name)) {
					element.removeAttribute(name);
				} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
					element[name] = null;
				} else {
					delete element[name];
				}
			} else {
				element[name] = newVal;
			}
		}
	}
	static updateAttribute(element,name,newVal,oldVal) {
		if(newVal == null) {
			element.removeAttribute(name);
		} else {
			element.setAttribute(name,newVal);
		}
	}
}
coconut_vdom__$Html_Elt.__name__ = true;
coconut_vdom__$Html_Elt.__interfaces__ = [coconut_diffing_NodeType];
Object.assign(coconut_vdom__$Html_Elt.prototype, {
	__class__: coconut_vdom__$Html_Elt
	,ns: null
	,tag: null
});
class coconut_vdom_Html {
	static nodeType(tag) {
		let _g = coconut_vdom_Html.nodeTypes.h[tag];
		let tmp;
		if(_g == null) {
			let this1 = coconut_vdom_Html.nodeTypes;
			let v = new coconut_vdom__$Html_Elt(tag);
			this1.h[tag] = v;
			tmp = v;
		} else {
			tmp = _g;
		}
		return tmp;
	}
}
coconut_vdom_Html.__name__ = true;
class bootstrap_ListGroup extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_flush = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
		this.__coco_horizontal = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
		this.__coco_items = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return function(tags) {
				return null;
			};
		}}));
		this.__coco_links = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return function(tags) {
				return null;
			};
		}}));
		this.__coco_buttons = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return function(tags) {
				return null;
			};
		}}));
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	items(tags) {
		return (tink_state_Observable.get_value(this.__coco_items))(tags);
	}
	links(tags) {
		return (tink_state_Observable.get_value(this.__coco_links))(tags);
	}
	buttons(tags) {
		return (tink_state_Observable.get_value(this.__coco_buttons))(tags);
	}
	render() {
		let __r = [];
		let className = tink_state_Observable.get_value(this.__coco_className);
		let _g = new haxe_ds_StringMap();
		_g.h["list-group"] = true;
		let value = tink_state_Observable.get_value(this.__coco_horizontal);
		_g.h["list-group" + "-horizontal"] = value;
		let value1 = tink_state_Observable.get_value(this.__coco_flush);
		_g.h["flush"] = value1;
		let className1 = tink_domspec_ClassName.add(className,tink_domspec_ClassName.ofMap(_g));
		if(this.items != null) {
			let hxxMeta = { };
			let __r1 = [];
			let _g = 0;
			let _g1 = this.items(bootstrap_ListGroup.itemTags);
			while(_g < (_g1 == null ? 0 : _g1.length)) {
				let _0 = _g1 == null ? null : _g1[_g];
				++_g;
				__r1.push(_0);
			}
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.UL,hxxMeta.ref,hxxMeta.key,{ className : className1},__r1));
		}
		if(this.links != null) {
			let hxxMeta = { };
			let __r1 = [];
			let _g = 0;
			let _g1 = this.links(bootstrap_ListGroup.linkTags);
			while(_g < (_g1 == null ? 0 : _g1.length)) {
				let _0 = _g1 == null ? null : _g1[_g];
				++_g;
				__r1.push(_0);
			}
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ className : className1},__r1));
		}
		if(this.buttons != null) {
			let hxxMeta = { };
			let __r1 = [];
			let _g = 0;
			let _g1 = this.buttons(bootstrap_ListGroup.buttonTags);
			while(_g < (_g1 == null ? 0 : _g1.length)) {
				let _0 = _g1 == null ? null : _g1[_g];
				++_g;
				__r1.push(_0);
			}
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ className : className1},__r1));
		}
		return coconut_diffing_VNodeData.VMany(__r);
	}
	__initAttributes(attributes) {
		this.__coco_className.setData(attributes.className);
		this.__coco_flush.setData(attributes.flush);
		this.__coco_horizontal.setData(attributes.horizontal);
		this.__coco_items.setData(attributes.items);
		this.__coco_links.setData(attributes.links);
		this.__coco_buttons.setData(attributes.buttons);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(bootstrap_ListGroup.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
bootstrap_ListGroup.__name__ = true;
bootstrap_ListGroup.__super__ = coconut_vdom_View;
Object.assign(bootstrap_ListGroup.prototype, {
	__class__: bootstrap_ListGroup
	,__coco_className: null
	,__coco_flush: null
	,__coco_horizontal: null
	,__coco_items: null
	,__coco_links: null
	,__coco_buttons: null
});
class chirps_ChirpModel {
	constructor(__coco_init) {
		this._updatePerformed = tink_core_Signal.trigger();
		this.annex = new coconut_data_helpers_Annex(this);
		this.user = __coco_init.user;
		this.time = __coco_init.time;
		this.message = __coco_init.message;
		this.__coco_transitionCount = new tink_state__$State_SimpleState(0,null,null);
		this.errorTrigger = tink_core_Signal.trigger();
		this.transitionErrors = this.errorTrigger;
		this.observables = { user : tink_state_Observable.const(this.user), time : tink_state_Observable.const(this.time), message : tink_state_Observable.const(this.message), isInTransition : tink_state_Observable.map(this.__coco_transitionCount,tink_state_Transform.plain(function(count) {
			return count > 0;
		}))};
	}
	static listFromJson(str) {
		let simples = new JsonParser_$0().fromJson(str);
		zenlog_Log.Logger.debug("got " + simples.length + " simple-chirps...",null,{ fileName : "src/chirps/ChirpModel.hx", lineNumber : 24, className : "chirps.ChirpModel", methodName : "listFromJson"});
		let list = tink_pure_List._new();
		let _g = 0;
		while(_g < simples.length) {
			let item = simples[_g];
			++_g;
			zenlog_Log.Logger.debug("processing " + Std.string(item),null,{ fileName : "src/chirps/ChirpModel.hx", lineNumber : 27, className : "chirps.ChirpModel", methodName : "listFromJson"});
			list = tink_pure_List.append(list,new chirps_ChirpModel({ user : hawk_core_UUID.fromString(item.user), time : hawk_datatypes_Timestamp.fromUInt(item.time), message : item.message}));
		}
		return list;
	}
}
chirps_ChirpModel.__name__ = true;
chirps_ChirpModel.__interfaces__ = [coconut_data_Model];
Object.assign(chirps_ChirpModel.prototype, {
	__class__: chirps_ChirpModel
	,user: null
	,time: null
	,message: null
	,_updatePerformed: null
	,observables: null
	,transitionErrors: null
	,errorTrigger: null
	,__coco_transitionCount: null
	,annex: null
});
class chirps_ChirpSimple {
	constructor() {
	}
}
chirps_ChirpSimple.__name__ = true;
Object.assign(chirps_ChirpSimple.prototype, {
	__class__: chirps_ChirpSimple
	,user: null
	,time: null
	,message: null
});
class chirps_ChirpPage extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		let this1 = { f : function() {
			let __r = [];
			let hxxMeta = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H2,hxxMeta.ref,hxxMeta.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"User",null)]));
			__r.push(chirps_UserSection.fromHxx({ },{ }));
			let hxxMeta1 = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H2,hxxMeta1.ref,hxxMeta1.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Chirp",null)]));
			__r.push(chirps_ChirpSection.fromHxx({ },{ }));
			return __r;
		}};
		return bootstrap_Container.fromHxx({ },{ children : tink_state_Observable.auto(this1)});
	}
	__initAttributes(attributes) {
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(chirps_ChirpPage.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
chirps_ChirpPage.__name__ = true;
chirps_ChirpPage.__super__ = coconut_vdom_View;
Object.assign(chirps_ChirpPage.prototype, {
	__class__: chirps_ChirpPage
});
class chirps_ChirpSection extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		let _gthis = this;
		this.__coco_chirps = new tink_state__$State_SimpleState(null,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,function(firstTime) {
			if(firstTime) {
				_gthis.viewDidMount();
			}
		});
	}
	loadChirps(_) {
		let _gthis = this;
		tink_core_Promise.next(APIUtil.makeGet("api/chirps"),function(s) {
			zenlog_Log.Logger.debug("res body == " + s,null,{ fileName : "src/chirps/ChirpSection.hx", lineNumber : 15, className : "chirps.ChirpSection", methodName : "loadChirps"});
			let param = chirps_ChirpModel.listFromJson(s);
			_gthis.__coco_chirps.set(param);
			let this1 = tink_state_State.get_value(_gthis.__coco_chirps);
			zenlog_Log.Logger.debug("got " + (this1 == null ? 0 : this1.length) + " chirps",null,{ fileName : "src/chirps/ChirpSection.hx", lineNumber : 17, className : "chirps.ChirpSection", methodName : "loadChirps"});
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(s)));
		}).eager();
	}
	postChirp(msg) {
		let _gthis = this;
		tink_core_Promise.next(APIUtil.makePost("api/chirp",{ msg : msg}),function(s) {
			zenlog_Log.Logger.debug("res body == " + s,null,{ fileName : "src/chirps/ChirpSection.hx", lineNumber : 25, className : "chirps.ChirpSection", methodName : "postChirp"});
			let param = chirps_ChirpModel.listFromJson(s);
			_gthis.__coco_chirps.set(param);
			let this1 = tink_state_State.get_value(_gthis.__coco_chirps);
			zenlog_Log.Logger.debug("got " + (this1 == null ? 0 : this1.length) + " chirps",null,{ fileName : "src/chirps/ChirpSection.hx", lineNumber : 27, className : "chirps.ChirpSection", methodName : "postChirp"});
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(s)));
		}).eager();
	}
	viewDidMount() {
		this.loadChirps(null);
	}
	render() {
		let _gthis = this;
		let hxxMeta = { };
		let __r = [];
		let tmp = tink_state_Observable.auto({ f : function() {
			return $bind(_gthis,_gthis.loadChirps);
		}});
		__r.push(bootstrap_Button.fromHxx({ },{ onclick : tmp, children : tink_state_Observable.auto({ f : function() {
			return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Load",null)];
		}})}));
		__r.push(chirps_PostChirp.fromHxx({ },{ postChirp : tink_state_Observable.auto({ f : function() {
			return $bind(_gthis,_gthis.postChirp);
		}})}));
		__r.push(chirps_RecentChirps.fromHxx({ },{ chirps : this.__coco_chirps}));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	__initAttributes(attributes) {
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(chirps_ChirpSection.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
chirps_ChirpSection.__name__ = true;
chirps_ChirpSection.__super__ = coconut_vdom_View;
Object.assign(chirps_ChirpSection.prototype, {
	__class__: chirps_ChirpSection
	,__coco_chirps: null
});
class chirps_PostChirp extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_postChirp = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_msg = new tink_state__$State_SimpleState("",null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	postChirp(a0) {
		(tink_state_Observable.get_value(this.__coco_postChirp))(a0);
	}
	setMsg(v) {
		this.__coco_msg.set(v);
	}
	buttonClick(_) {
		this.postChirp(tink_state_State.get_value(this.__coco_msg));
	}
	render() {
		let _gthis = this;
		if(GlobalState.ensure().userToken.length == 0) {
			let hxxMeta = { };
			return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta.ref,hxxMeta.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Sign in before you start chirping",null)]);
		}
		let this1 = { f : function() {
			let __r = [];
			let this1 = tink_state_Observable.auto({ f : function() {
				return general_$tools_InputType.Text;
			}});
			__r.push(general_$tools_MyTextInput.fromHxx({ },{ type : this1, placeholder : tink_state_Observable.const("message"), onTextChange : tink_state_Observable.auto({ f : function() {
				return $bind(_gthis,_gthis.setMsg);
			}})}));
			let this2 = tink_state_Observable.auto({ f : function() {
				return $bind(_gthis,_gthis.buttonClick);
			}});
			__r.push(bootstrap_Button.fromHxx({ },{ onclick : this2, children : tink_state_Observable.auto({ f : function() {
				return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Send",null)];
			}})}));
			return __r;
		}};
		return bootstrap_Row.fromHxx({ },{ children : tink_state_Observable.auto(this1)});
	}
	__initAttributes(attributes) {
		this.__coco_postChirp.setData(attributes.postChirp);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(chirps_PostChirp.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
chirps_PostChirp.__name__ = true;
chirps_PostChirp.__super__ = coconut_vdom_View;
Object.assign(chirps_PostChirp.prototype, {
	__class__: chirps_PostChirp
	,__coco_postChirp: null
	,__coco_msg: null
});
class chirps_RecentChirps extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_chirps = new coconut_ui_tools_Slot(this,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		let _gthis = this;
		let this1 = { f : function() {
			return function(__data__) {
				let item = $bind(__data__,__data__.item);
				let __r = [];
				let _g = new tink_pure_NodeIterator(tink_state_Observable.get_value(_gthis.__coco_chirps));
				while(_g.list.length > 0) {
					let t = _g.next();
					let this1 = { f : function() {
						let hxxMeta = { };
						let __r = [];
						__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,hawk_core_UUID.toString(t.user),null));
						__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null," at ",null));
						__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,Std.string(t.time),null));
						__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null," says:  ",null));
						__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,t.message,null));
						return [coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta.ref,hxxMeta.key,{ },__r)];
					}};
					__r.push(item({ children : [bootstrap_Row.fromHxx({ },{ children : tink_state_Observable.auto(this1)})]}));
				}
				return __r;
			};
		}};
		return bootstrap_ListGroup.fromHxx({ },{ className : tink_state_Observable.const(tink_domspec_ClassName.ofString("mb-1")), items : tink_state_Observable.auto(this1)});
	}
	__initAttributes(attributes) {
		this.__coco_chirps.setData(attributes.chirps);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(chirps_RecentChirps.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
chirps_RecentChirps.__name__ = true;
chirps_RecentChirps.__super__ = coconut_vdom_View;
Object.assign(chirps_RecentChirps.prototype, {
	__class__: chirps_RecentChirps
	,__coco_chirps: null
});
class chirps_UserSection extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.SIGN_IN = "SIGN_IN";
		this.REGISTER = "REGISTER";
		this.__coco_userID = new tink_state__$State_SimpleState("",null,null);
		this.__coco_email = new tink_state__$State_SimpleState("",null,null);
		this.__coco_token = new tink_state__$State_SimpleState("",null,null);
		this.__coco_intent = new tink_state__$State_SimpleState(this.REGISTER,null,null);
		this.__coco_formPass = new tink_state__$State_SimpleState("",null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	signOut(_) {
		this.__coco_userID.set("");
		this.__coco_email.set("");
		this.__coco_token.set("");
	}
	register(data) {
		this.handleAuthResponse(APIUtil.makePost("api/register",data),data);
	}
	signIn(data) {
		this.handleAuthResponse(APIUtil.makePost("api/signin",data),data);
	}
	handleAuthResponse(p,data) {
		let _gthis = this;
		tink_core_Promise.next(tink_core_Promise.next(p,function(str) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(hawk_util_Json.jsonToAnonMap(str))));
		}),function(map) {
			let param = map.get("id");
			_gthis.__coco_userID.set(param);
			let param1 = map.get("token");
			_gthis.__coco_token.set(param1);
			GlobalState.ensure().userToken = tink_state_State.get_value(_gthis.__coco_token);
			_gthis.__coco_email.set(hawk_datatypes_Email.toString(data.email));
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
		}).eager();
	}
	intentRegister(_) {
		this.__coco_intent.set(this.REGISTER);
	}
	intentSignIn(_) {
		this.__coco_intent.set(this.SIGN_IN);
	}
	render() {
		let _gthis = this;
		let hxxMeta = { };
		let __r = [];
		if(tink_state_State.get_value(this.__coco_userID).length > 0) {
			let this1 = { f : function() {
				let __r = [];
				let hxxMeta = { };
				let __r1 = [];
				__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"You are signed in as ",null));
				let s = tink_state_State.get_value(_gthis.__coco_email);
				__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null));
				__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta.ref,hxxMeta.key,{ },__r1));
				let this1 = tink_state_Observable.auto({ f : function() {
					return $bind(_gthis,_gthis.signOut);
				}});
				__r.push(bootstrap_Button.fromHxx({ },{ onclick : this1, children : tink_state_Observable.auto({ f : function() {
					return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Sign Out",null)];
				}})}));
				return __r;
			}};
			__r.push(bootstrap_Row.fromHxx({ },{ children : tink_state_Observable.auto(this1)}));
		} else {
			let this1 = { f : function() {
				let __r = [];
				let this1 = tink_state_Observable.auto({ f : function() {
					return $bind(_gthis,_gthis.intentRegister);
				}});
				__r.push(bootstrap_Button.fromHxx({ },{ onclick : this1, children : tink_state_Observable.auto({ f : function() {
					return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Register",null)];
				}})}));
				let this2 = tink_state_Observable.auto({ f : function() {
					return $bind(_gthis,_gthis.intentSignIn);
				}});
				__r.push(bootstrap_Button.fromHxx({ },{ onclick : this2, children : tink_state_Observable.auto({ f : function() {
					return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Sign In",null)];
				}})}));
				return __r;
			}};
			__r.push(bootstrap_Row.fromHxx({ },{ children : tink_state_Observable.auto(this1)}));
			if(tink_state_State.get_value(this.__coco_intent) == this.REGISTER) {
				__r.push(chirps_RegisterForm.fromHxx({ },{ onSubmit : tink_state_Observable.auto({ f : function() {
					return $bind(_gthis,_gthis.register);
				}})}));
			} else {
				__r.push(chirps_SignInForm.fromHxx({ },{ onSubmit : tink_state_Observable.auto({ f : function() {
					return $bind(_gthis,_gthis.signIn);
				}})}));
			}
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	__initAttributes(attributes) {
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(chirps_UserSection.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
chirps_UserSection.__name__ = true;
chirps_UserSection.__super__ = coconut_vdom_View;
Object.assign(chirps_UserSection.prototype, {
	__class__: chirps_UserSection
	,REGISTER: null
	,SIGN_IN: null
	,__coco_userID: null
	,__coco_email: null
	,__coco_token: null
	,__coco_intent: null
	,__coco_formPass: null
});
class chirps_SignInForm extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_onSubmit = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_formEmail = new tink_state__$State_SimpleState("",null,null);
		this.__coco_formPass = new tink_state__$State_SimpleState("",null,null);
		this.__coco_error = new tink_state__$State_SimpleState("",null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	onSubmit(a0) {
		(tink_state_Observable.get_value(this.__coco_onSubmit))(a0);
	}
	setEmail(v) {
		this.__coco_formEmail.set(v);
	}
	setPass(v) {
		this.__coco_formPass.set(v);
	}
	submit(_) {
		let validateEmail = hawk_datatypes_Email.createValid(tink_state_State.get_value(this.__coco_formEmail));
		let tmp;
		switch(validateEmail._hx_index) {
		case 0:
			tmp = false;
			break;
		case 1:
			tmp = true;
			break;
		}
		if(tmp) {
			let param;
			switch(validateEmail._hx_index) {
			case 0:
				param = null;
				break;
			case 1:
				param = validateEmail.failure;
				break;
			}
			this.__coco_error.set(param.message);
			return;
		}
		let validatePass = hawk_datatypes_Password.createValid(tink_state_State.get_value(this.__coco_formPass));
		let tmp1;
		switch(validatePass._hx_index) {
		case 0:
			tmp1 = false;
			break;
		case 1:
			tmp1 = true;
			break;
		}
		if(tmp1) {
			let param;
			switch(validatePass._hx_index) {
			case 0:
				param = null;
				break;
			case 1:
				param = validatePass.failure;
				break;
			}
			this.__coco_error.set(param.message);
			return;
		}
		this.onSubmit({ email : tink_core_OutcomeTools.sure(validateEmail), password : tink_core_OutcomeTools.sure(validatePass)});
	}
	render() {
		let _gthis = this;
		let hxxMeta = { };
		let __r = [];
		if(tink_state_State.get_value(this.__coco_error).length > 0) {
			let hxxMeta = { };
			let s = tink_state_State.get_value(this.__coco_error);
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta.ref,hxxMeta.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null)]));
		}
		let tmp = tink_state_Observable.auto({ f : function() {
			return general_$tools_InputType.Text;
		}});
		__r.push(general_$tools_MyTextInput.fromHxx({ },{ type : tmp, placeholder : tink_state_Observable.const("email"), onTextChange : tink_state_Observable.auto({ f : function() {
			return $bind(_gthis,_gthis.setEmail);
		}})}));
		let tmp1 = tink_state_Observable.auto({ f : function() {
			return general_$tools_InputType.Password;
		}});
		__r.push(general_$tools_MyTextInput.fromHxx({ },{ type : tmp1, placeholder : tink_state_Observable.const("password"), onTextChange : tink_state_Observable.auto({ f : function() {
			return $bind(_gthis,_gthis.setPass);
		}})}));
		let tmp2 = tink_state_Observable.auto({ f : function() {
			return $bind(_gthis,_gthis.submit);
		}});
		__r.push(bootstrap_Button.fromHxx({ },{ onclick : tmp2, children : tink_state_Observable.auto({ f : function() {
			return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Submit",null)];
		}})}));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	__initAttributes(attributes) {
		this.__coco_onSubmit.setData(attributes.onSubmit);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(chirps_SignInForm.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
chirps_SignInForm.__name__ = true;
chirps_SignInForm.__super__ = coconut_vdom_View;
Object.assign(chirps_SignInForm.prototype, {
	__class__: chirps_SignInForm
	,__coco_onSubmit: null
	,__coco_formEmail: null
	,__coco_formPass: null
	,__coco_error: null
});
class chirps_RegisterForm extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_onSubmit = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_formEmail = new tink_state__$State_SimpleState("",null,null);
		this.__coco_formPass = new tink_state__$State_SimpleState("",null,null);
		this.__coco_formPassConfirm = new tink_state__$State_SimpleState("",null,null);
		this.__coco_error = new tink_state__$State_SimpleState("",null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	onSubmit(a0) {
		(tink_state_Observable.get_value(this.__coco_onSubmit))(a0);
	}
	setEmail(v) {
		this.__coco_formEmail.set(v);
	}
	setPass(v) {
		this.__coco_formPass.set(v);
	}
	setPassConfirm(v) {
		this.__coco_formPassConfirm.set(v);
	}
	submit(_) {
		let validateEmail = hawk_datatypes_Email.createValid(tink_state_State.get_value(this.__coco_formEmail));
		let tmp;
		switch(validateEmail._hx_index) {
		case 0:
			tmp = false;
			break;
		case 1:
			tmp = true;
			break;
		}
		if(tmp) {
			let param;
			switch(validateEmail._hx_index) {
			case 0:
				param = null;
				break;
			case 1:
				param = validateEmail.failure;
				break;
			}
			this.__coco_error.set(param.message);
			return;
		}
		if(tink_state_State.get_value(this.__coco_formPass) != tink_state_State.get_value(this.__coco_formPassConfirm)) {
			this.__coco_error.set("Passwords should match");
			return;
		}
		let validatePass = hawk_datatypes_Password.createValid(tink_state_State.get_value(this.__coco_formPass));
		let tmp1;
		switch(validatePass._hx_index) {
		case 0:
			tmp1 = false;
			break;
		case 1:
			tmp1 = true;
			break;
		}
		if(tmp1) {
			let param;
			switch(validatePass._hx_index) {
			case 0:
				param = null;
				break;
			case 1:
				param = validatePass.failure;
				break;
			}
			this.__coco_error.set(param.message);
			return;
		}
		this.onSubmit({ email : tink_core_OutcomeTools.sure(validateEmail), password : tink_core_OutcomeTools.sure(validatePass)});
	}
	render() {
		let _gthis = this;
		let hxxMeta = { };
		let __r = [];
		if(tink_state_State.get_value(this.__coco_error).length > 0) {
			let hxxMeta = { };
			let s = tink_state_State.get_value(this.__coco_error);
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta.ref,hxxMeta.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null)]));
		}
		let tmp = tink_state_Observable.auto({ f : function() {
			return general_$tools_InputType.Text;
		}});
		__r.push(general_$tools_MyTextInput.fromHxx({ },{ type : tmp, placeholder : tink_state_Observable.const("email"), onTextChange : tink_state_Observable.auto({ f : function() {
			return $bind(_gthis,_gthis.setEmail);
		}})}));
		let tmp1 = tink_state_Observable.auto({ f : function() {
			return general_$tools_InputType.Password;
		}});
		__r.push(general_$tools_MyTextInput.fromHxx({ },{ type : tmp1, placeholder : tink_state_Observable.const("password"), onTextChange : tink_state_Observable.auto({ f : function() {
			return $bind(_gthis,_gthis.setPass);
		}})}));
		let tmp2 = tink_state_Observable.auto({ f : function() {
			return general_$tools_InputType.Password;
		}});
		__r.push(general_$tools_MyTextInput.fromHxx({ },{ type : tmp2, placeholder : tink_state_Observable.const("password again"), onTextChange : tink_state_Observable.auto({ f : function() {
			return $bind(_gthis,_gthis.setPassConfirm);
		}})}));
		let tmp3 = tink_state_Observable.auto({ f : function() {
			return $bind(_gthis,_gthis.submit);
		}});
		__r.push(bootstrap_Button.fromHxx({ },{ onclick : tmp3, children : tink_state_Observable.auto({ f : function() {
			return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Submit",null)];
		}})}));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	__initAttributes(attributes) {
		this.__coco_onSubmit.setData(attributes.onSubmit);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(chirps_RegisterForm.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
chirps_RegisterForm.__name__ = true;
chirps_RegisterForm.__super__ = coconut_vdom_View;
Object.assign(chirps_RegisterForm.prototype, {
	__class__: chirps_RegisterForm
	,__coco_onSubmit: null
	,__coco_formEmail: null
	,__coco_formPass: null
	,__coco_formPassConfirm: null
	,__coco_error: null
});
class coconut_diffing_Applicator {
}
coconut_diffing_Applicator.__name__ = true;
coconut_diffing_Applicator.__isInterface__ = true;
Object.assign(coconut_diffing_Applicator.prototype, {
	__class__: coconut_diffing_Applicator
	,unsetLastRender: null
	,setLastRender: null
	,getLastRender: null
	,traverseSiblings: null
	,traverseChildren: null
	,placeholder: null
});
class coconut_diffing_Cursor {
}
coconut_diffing_Cursor.__name__ = true;
coconut_diffing_Cursor.__isInterface__ = true;
Object.assign(coconut_diffing_Cursor.prototype, {
	__class__: coconut_diffing_Cursor
	,insert: null
	,'delete': null
	,step: null
	,current: null
});
class coconut_diffing_Differ {
	constructor(applicator) {
		this.applicator = applicator;
	}
	_renderAll(nodes,later,parent,$with) {
		let byType = new haxe_ds_ObjectMap();
		let childList = [];
		let process = null;
		process = function(nodes) {
			if(nodes != null) {
				let _g = 0;
				while(_g < nodes.length) {
					let n = nodes[_g];
					++_g;
					if(n != null) {
						switch(n._hx_index) {
						case 0:
							childList.push(coconut_diffing_RNode.RNative(null,n.n,null));
							break;
						case 1:
							let w = n.w;
							$with.widgetInst(w);
							let r = w;
							let ref = null;
							let key = coconut_diffing_Key.ofObject(w);
							let type = coconut_diffing_Differ.WIDGET_INST;
							let n1 = coconut_diffing_RNode.RWidget(w,null);
							let registry;
							let _g1 = byType.h[type.__id__];
							if(_g1 == null) {
								let v = new coconut_diffing_TypeRegistry();
								byType.set(type,v);
								registry = v;
							} else {
								registry = _g1;
							}
							if(ref != null) {
								later(function() {
									ref(r);
								});
							}
							if(key == null) {
								registry.put(n1);
							} else {
								registry.set(key,n1);
							}
							childList.push(n1);
							break;
						case 2:
							process(n.nodes);
							break;
						case 3:
							let _g2 = n.key;
							let _g3 = n.ref;
							let attr = n.a;
							let type1 = n.type;
							let real = $with.native(type1,_g2,attr,n.children);
							let r1 = real;
							let ref1 = _g3;
							let n2 = coconut_diffing_RNode.RNative(attr,real,_g3);
							let registry1;
							let _g4 = byType.h[type1.__id__];
							if(_g4 == null) {
								let v = new coconut_diffing_TypeRegistry();
								byType.set(type1,v);
								registry1 = v;
							} else {
								registry1 = _g4;
							}
							if(ref1 != null) {
								later(function() {
									ref1(r1);
								});
							}
							if(_g2 == null) {
								registry1.put(n2);
							} else {
								registry1.set(_g2,n2);
							}
							childList.push(n2);
							break;
						case 4:
							let _g5 = n.key;
							let _g6 = n.ref;
							let type2 = n.type;
							let w1 = $with.widget(type2,_g5,n.a);
							let r2 = w1;
							let ref2 = _g6;
							let n3 = coconut_diffing_RNode.RWidget(w1,_g6);
							let registry2;
							let _g7 = byType.h[type2.__id__];
							if(_g7 == null) {
								let v = new coconut_diffing_TypeRegistry();
								byType.set(type2,v);
								registry2 = v;
							} else {
								registry2 = _g7;
							}
							if(ref2 != null) {
								later(function() {
									ref2(r2);
								});
							}
							if(_g5 == null) {
								registry2.put(n3);
							} else {
								registry2.set(_g5,n3);
							}
							childList.push(n3);
							break;
						}
					}
				}
			}
		};
		process(nodes);
		return new coconut_diffing_Rendered(byType,childList);
	}
	renderAll(nodes,parent,later) {
		let _gthis = this;
		return this._renderAll(nodes,later,parent,{ native : function(type,_,attr,children) {
			return _gthis.createNative(type,attr,children,parent,later);
		}, widget : function(t,_,a) {
			return _gthis.createWidget(t,a,parent,later);
		}, widgetInst : function(w) {
			_gthis.mountInstance(w,parent,later);
		}});
	}
	mountInstance(w,parent,later) {
		if(w._coco_alive) {
			tink_core_TypedError.withData(null,"Same widget instance mounted twice",w,{ fileName : "coconut/diffing/Differ.hx", lineNumber : 93, className : "coconut.diffing.Differ", methodName : "mountInstance"});
		}
		w._coco_initialize(this,parent,later);
	}
	createWidget(t,a,parent,later) {
		let ret = t.create(a);
		ret._coco_initialize(this,parent,later);
		return ret;
	}
	updateAll(before,nodes,parent,later) {
		let _gthis = this;
		let _g = 0;
		let _g1 = before.childList;
		while(_g < _g1.length) {
			let node = _g1[_g];
			++_g;
			switch(node._hx_index) {
			case 0:
				let _g2 = node.ref;
				if(_g2 != null) {
					_g2(null);
				}
				break;
			case 1:
				let _g3 = node.ref;
				if(_g3 != null) {
					_g3(null);
				}
				break;
			default:
			}
		}
		let previous = function(t,key) {
			let _g = before.byType.h[t.__id__];
			if(_g == null) {
				return null;
			} else if(key == null) {
				return _g.pull();
			} else {
				return _g.get(key);
			}
		};
		let native = function(type,key,nuAttr,nuChildren) {
			let _g = previous(type,key);
			if(_g == null) {
				return _gthis.createNative(type,nuAttr,nuChildren,parent,later);
			} else if(_g._hx_index == 0) {
				let _g1 = _g.r;
				type.update(_g1,_g.a,nuAttr);
				_gthis._render(nuChildren,_g1,parent,later);
				return _g1;
			} else {
				throw haxe_Exception.thrown("assert");
			}
		};
		let after = this._renderAll(nodes,later,parent,{ native : native, widget : function(type,key,attr) {
			let _g = previous(type,key);
			if(_g == null) {
				return _gthis.createWidget(type,attr,parent,later);
			} else if(_g._hx_index == 1) {
				let _g1 = _g.w;
				type.update(attr,_g1);
				return _g1;
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}, widgetInst : function(w) {
			let _g = previous(coconut_diffing_Differ.WIDGET_INST,coconut_diffing_Key.ofObject(w));
			if(_g == null) {
				_gthis.mountInstance(w,parent,later);
			} else if(_g._hx_index != 1) {
				throw haxe_Exception.thrown("assert");
			}
		}});
		let registry = before.byType.iterator();
		while(registry.hasNext()) {
			let registry1 = registry.next();
			let f = $bind(this,this.destroyRender);
			if(registry1.keyed != null) {
				let v = haxe_ds_StringMap.valueIterator(registry1.keyed.h);
				while(v.hasNext()) f(v.next());
			}
			if(registry1.unkeyed != null) {
				let _g = 0;
				let _g1 = registry1.unkeyed;
				while(_g < _g1.length) f(_g1[_g++]);
			}
		}
		return after;
	}
	destroyRender(r) {
		switch(r._hx_index) {
		case 0:
			let _g = this.applicator.unsetLastRender(r.r);
			if(_g != null) {
				let _g1 = _g.childList;
				let _g2 = 0;
				while(_g2 < _g1.length) this.destroyRender(_g1[_g2++]);
			}
			break;
		case 1:
			r.w._coco_teardown();
			break;
		}
	}
	_render(nodes,target,parent,later) {
		let lastCount = 0;
		let ret;
		let _g = this.applicator.getLastRender(target);
		if(_g == null) {
			ret = this.renderAll(nodes,parent,later);
		} else {
			lastCount = _g.justCount();
			ret = this.updateAll(_g,nodes,parent,later);
		}
		this.applicator.setLastRender(target,ret);
		this.setChildren(later,lastCount,this.applicator.traverseChildren(target),ret);
		return ret;
	}
	setChildren(later,previousCount,cursor,next,log) {
		let insertedCount = 0;
		let currentCount = 0;
		next.each(later,function(r) {
			currentCount += 1;
			if(r == cursor.current()) {
				cursor.step();
			} else if(cursor.insert(r)) {
				insertedCount += 1;
			}
		});
		let deleteCount = previousCount + insertedCount - currentCount;
		if(log) {
			haxe_Log.trace(deleteCount,{ fileName : "coconut/diffing/Differ.hx", lineNumber : 197, className : "coconut.diffing.Differ", methodName : "setChildren"});
		}
		let _g = 0;
		while(_g < deleteCount) {
			++_g;
			if(!cursor.delete()) {
				break;
			}
		}
	}
	render(virtual,target) {
		let _gthis = this;
		this.run(function(later) {
			return _gthis._render(virtual,target,null,later);
		});
	}
	run(f) {
		let after = [];
		let ret = f(function(later) {
			if(later != null) {
				after.push(later);
			}
		});
		let _g = 0;
		while(_g < after.length) after[_g++]();
		return ret;
	}
	createNative(type,attr,children,parent,later) {
		let ret = type.create(attr);
		if(children != null) {
			this._render(children,ret,parent,later);
		}
		return ret;
	}
}
coconut_diffing_Differ.__name__ = true;
Object.assign(coconut_diffing_Differ.prototype, {
	__class__: coconut_diffing_Differ
	,applicator: null
});
class coconut_diffing_Key {
	static ofFloat(f) {
		if(f == null) {
			return "null";
		} else {
			return "" + f;
		}
	}
	static ofObject(o) {
		return coconut_diffing_Key.ofFloat(o.__id__ || (o.__id__ = $global.$haxeUID++));
	}
}
var coconut_diffing_RNode = $hxEnums["coconut.diffing.RNode"] = { __ename__ : true, __constructs__ : ["RNative","RWidget"]
	,RNative: ($_=function(a,r,ref) { return {_hx_index:0,a:a,r:r,ref:ref,__enum__:"coconut.diffing.RNode",toString:$estr}; },$_.__params__ = ["a","r","ref"],$_)
	,RWidget: ($_=function(w,ref) { return {_hx_index:1,w:w,ref:ref,__enum__:"coconut.diffing.RNode",toString:$estr}; },$_.__params__ = ["w","ref"],$_)
};
class coconut_diffing_Rendered {
	constructor(byType,childList) {
		this.byType = byType;
		this.childList = childList;
	}
	justCount() {
		let ret = 0;
		let _g = 0;
		let _g1 = this.childList;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			let ret1;
			switch(c._hx_index) {
			case 0:
				ret1 = 1;
				break;
			case 1:
				ret1 = c.w._coco_lastRender.justCount();
				break;
			}
			ret += ret1;
		}
		return ret;
	}
	each(later,f) {
		let rec = null;
		rec = function(children) {
			let _g = 0;
			while(_g < children.length) {
				let c = children[_g];
				++_g;
				switch(c._hx_index) {
				case 0:
					f(c.r);
					break;
				case 1:
					rec(c.w._coco_getRender(later).childList);
					break;
				}
			}
		};
		rec(this.childList);
	}
}
coconut_diffing_Rendered.__name__ = true;
Object.assign(coconut_diffing_Rendered.prototype, {
	__class__: coconut_diffing_Rendered
	,byType: null
	,childList: null
});
class coconut_diffing_TypeRegistry {
	constructor() {
	}
	get(key) {
		if(this.keyed == null) {
			return null;
		} else {
			let this1 = this.keyed;
			let _g = this1.h[key];
			if(_g == null) {
				return null;
			} else {
				let _this = this1;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
				return _g;
			}
		}
	}
	set(key,value) {
		if(this.keyed == null) {
			this.keyed = new haxe_ds_StringMap();
		}
		this.keyed.h[key] = value;
	}
	put(v) {
		if(this.unkeyed == null) {
			this.unkeyed = [];
		}
		this.unkeyed.push(v);
	}
	pull() {
		if(this.unkeyed == null) {
			return null;
		} else {
			return this.unkeyed.shift();
		}
	}
}
coconut_diffing_TypeRegistry.__name__ = true;
Object.assign(coconut_diffing_TypeRegistry.prototype, {
	__class__: coconut_diffing_TypeRegistry
	,keyed: null
	,unkeyed: null
});
class coconut_vdom__$Html_Text {
	constructor() {
	}
	create(text) {
		return window.document.createTextNode(text);
	}
	update(target,old,nu) {
		if(nu != old) {
			target.textContent = nu;
		}
	}
}
coconut_vdom__$Html_Text.__name__ = true;
coconut_vdom__$Html_Text.__interfaces__ = [coconut_diffing_NodeType];
Object.assign(coconut_vdom__$Html_Text.prototype, {
	__class__: coconut_vdom__$Html_Text
});
class coconut_vdom_RenderResult {
	static ofInt(i) {
		return coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,i == null ? "null" : "" + i,null);
	}
}
class coconut_vdom__$Renderer_DomBackend {
	constructor() {
	}
	unsetLastRender(target) {
		let ret = target._coco_;
		delete target._coco_;
		return ret;
	}
	traverseSiblings(first) {
		return new coconut_vdom__$Renderer_DomCursor(first.parentNode,first);
	}
	traverseChildren(parent) {
		return new coconut_vdom__$Renderer_DomCursor(parent,parent.firstChild);
	}
	placeholder(target) {
		return coconut_vdom__$Renderer_DomBackend.PLACEHOLDER;
	}
	getLastRender(target) {
		return target._coco_;
	}
	setLastRender(target,r) {
		target._coco_ = r;
	}
}
coconut_vdom__$Renderer_DomBackend.__name__ = true;
coconut_vdom__$Renderer_DomBackend.__interfaces__ = [coconut_diffing_Applicator];
Object.assign(coconut_vdom__$Renderer_DomBackend.prototype, {
	__class__: coconut_vdom__$Renderer_DomBackend
});
class coconut_vdom_Renderer {
	static mountInto(target,vdom) {
		coconut_vdom_Renderer.DIFFER.render([vdom],target);
	}
}
coconut_vdom_Renderer.__name__ = true;
class coconut_vdom__$Renderer_DomCursor {
	constructor(parent,cur) {
		this.parent = parent;
		this.cur = cur;
	}
	insert(real) {
		let inserted = real.parentNode != this.parent;
		this.parent.insertBefore(real,this.cur);
		return inserted;
	}
	step() {
		let _g = this.cur;
		if(_g == null) {
			return false;
		} else {
			return (this.cur = _g.nextSibling) != null;
		}
	}
	delete() {
		let _g = this.cur;
		if(_g == null) {
			return false;
		} else {
			this.cur = _g.nextSibling;
			this.parent.removeChild(_g);
			return true;
		}
	}
	current() {
		return this.cur;
	}
}
coconut_vdom__$Renderer_DomCursor.__name__ = true;
coconut_vdom__$Renderer_DomCursor.__interfaces__ = [coconut_diffing_Cursor];
Object.assign(coconut_vdom__$Renderer_DomCursor.prototype, {
	__class__: coconut_vdom__$Renderer_DomCursor
	,parent: null
	,cur: null
});
var general_$tools_InputType = $hxEnums["general_tools.InputType"] = { __ename__ : true, __constructs__ : ["Text","Email","Password","Number"]
	,Text: {_hx_index:0,__enum__:"general_tools.InputType",toString:$estr}
	,Email: {_hx_index:1,__enum__:"general_tools.InputType",toString:$estr}
	,Password: {_hx_index:2,__enum__:"general_tools.InputType",toString:$estr}
	,Number: {_hx_index:3,__enum__:"general_tools.InputType",toString:$estr}
};
class general_$tools_MyTextInput extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_variant = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return "primary";
		}}));
		this.__coco_size = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return "md";
		}}));
		this.__coco_block = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
		this.__coco_active = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
		this.__coco_disabled = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(false));
		this.__coco_type = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return general_$tools_InputType.Text;
		}}));
		this.__coco_id = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(""));
		this.__coco_placeholder = new coconut_ui_tools_Slot(this,null,tink_state_Observable.const(""));
		this.__coco_className = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_label = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_onTextChange = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return function(v) {
			};
		}}));
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	onTextChange(a0) {
		(tink_state_Observable.get_value(this.__coco_onTextChange))(a0);
	}
	updateValue(v) {
		this.onTextChange(v);
	}
	render() {
		let _gthis = this;
		let classes = tink_state_Observable.get_value(this.__coco_className);
		let _g = new haxe_ds_StringMap();
		_g.h["form-control"] = true;
		let key = "form-control" + "-" + tink_state_Observable.get_value(this.__coco_variant);
		_g.h[key] = true;
		let key1 = "form-control" + "-" + tink_state_Observable.get_value(this.__coco_size);
		let value = tink_state_Observable.get_value(this.__coco_size) != null;
		_g.h[key1] = value;
		let value1 = tink_state_Observable.get_value(this.__coco_block);
		_g.h["form-control" + "-block"] = value1;
		let value2 = tink_state_Observable.get_value(this.__coco_disabled);
		_g.h["form-control" + "-disabled"] = value2;
		let value3 = tink_state_Observable.get_value(this.__coco_active);
		_g.h["active"] = value3;
		let classes1 = tink_domspec_ClassName.add(classes,tink_domspec_ClassName.ofMap(_g));
		let hxxMeta = { };
		let attr = { type : "" + Std.string(tink_state_Observable.get_value(this.__coco_type)), className : tink_domspec_ClassName.ofString("" + classes1), oninput : function(event) {
			_gthis.updateValue(event.currentTarget.value);
		}, id : "" + tink_state_Observable.get_value(this.__coco_id), disabled : tink_state_Observable.get_value(this.__coco_disabled), placeholder : "" + tink_state_Observable.get_value(this.__coco_placeholder)};
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INPUT,hxxMeta.ref,hxxMeta.key,attr,null);
	}
	__initAttributes(attributes) {
		this.__coco_variant.setData(attributes.variant);
		this.__coco_size.setData(attributes.size);
		this.__coco_block.setData(attributes.block);
		this.__coco_active.setData(attributes.active);
		this.__coco_disabled.setData(attributes.disabled);
		this.__coco_type.setData(attributes.type);
		this.__coco_id.setData(attributes.id);
		this.__coco_placeholder.setData(attributes.placeholder);
		this.__coco_className.setData(attributes.className);
		this.__coco_label.setData(attributes.label);
		this.__coco_onTextChange.setData(attributes.onTextChange);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(general_$tools_MyTextInput.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
general_$tools_MyTextInput.__name__ = true;
general_$tools_MyTextInput.__super__ = coconut_vdom_View;
Object.assign(general_$tools_MyTextInput.prototype, {
	__class__: general_$tools_MyTextInput
	,__coco_variant: null
	,__coco_size: null
	,__coco_block: null
	,__coco_active: null
	,__coco_disabled: null
	,__coco_type: null
	,__coco_id: null
	,__coco_placeholder: null
	,__coco_className: null
	,__coco_label: null
	,__coco_onTextChange: null
});
class general_$tools_apitest_APITester extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_url = new tink_state__$State_SimpleState("",null,null);
		this.__coco_auth = new tink_state__$State_SimpleState("",null,null);
		this.__coco_params = new tink_state__$State_SimpleState(null,null,null);
		this.__coco_param_ids = new tink_state__$State_SimpleState(0,null,null);
		this.__coco_apiMethod = new tink_state__$State_SimpleState("GET",null,null);
		this.__coco_responses = new tink_state__$State_SimpleState(null,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	onSend(_) {
		let _gthis = this;
		tink_http_FetchResponse.all(this.sendFetch()).handle(function(o) {
			switch(o._hx_index) {
			case 0:
				let _g = o.data;
				haxe_Log.trace(_g.header.statusCode,{ fileName : "src/general_tools/apitest/APITester.hx", lineNumber : 30, className : "general_tools.apitest.APITester", methodName : "onSend"});
				haxe_Log.trace(_g.body == null ? "null" : _g.body.toString(),{ fileName : "src/general_tools/apitest/APITester.hx", lineNumber : 31, className : "general_tools.apitest.APITester", methodName : "onSend"});
				_gthis.prependResponse(_g.body.toString());
				break;
			case 1:
				let _g1 = o.failure;
				haxe_Log.trace(_g1,{ fileName : "src/general_tools/apitest/APITester.hx", lineNumber : 34, className : "general_tools.apitest.APITester", methodName : "onSend"});
				_gthis.prependResponse("Failure:  " + _g1.message);
				break;
			}
		});
	}
	sendFetch() {
		if(tink_state_State.get_value(this.__coco_apiMethod) == "POST") {
			let param_map = new haxe_ds_StringMap();
			let _g = 0;
			let _g1 = tink_pure_List.toArray(tink_state_State.get_value(this.__coco_params));
			while(_g < _g1.length) {
				let p = _g1[_g];
				++_g;
				param_map.h[p.key] = p.val;
			}
			let body_str = hawk_util_Json.mapToJson(param_map);
			return tink_http_Fetch.fetch(tink_Url.fromString(tink_state_State.get_value(this.__coco_url)),{ method : "POST", headers : [new tink_http_HeaderField("content-type","application/json"),new tink_http_HeaderField("authorization",tink_state_State.get_value(this.__coco_auth))], body : new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(body_str))))});
		}
		return tink_http_Fetch.fetch(tink_Url.fromString(tink_state_State.get_value(this.__coco_url)),{ method : "GET", headers : [new tink_http_HeaderField("content-type","application/json"),new tink_http_HeaderField("authorization",tink_state_State.get_value(this.__coco_auth))]});
	}
	prependResponse(str) {
		try {
			str = haxe_format_JsonPrinter.print(JSON.parse(str),null,"  ");
		} catch( _g ) {
		}
		str = tink_state_State.get_value(this.__coco_url) + "\n- - - - -\n" + str;
		let param = tink_pure_List.prepend(tink_state_State.get_value(this.__coco_responses),str);
		this.__coco_responses.set(param);
	}
	clearResponses(_) {
		this.__coco_responses.set(tink_pure_List.fromArray([]));
	}
	setUrl(v) {
		this.__coco_url.set(v);
	}
	setAuth(v) {
		this.__coco_auth.set(v);
	}
	addParam() {
		let _g = this;
		let _g1 = tink_state_State.get_value(_g.__coco_param_ids);
		_g.__coco_param_ids.set(_g1 + 1);
		let newp = new general_$tools_apitest_Param({ id : tink_state_State.get_value(this.__coco_param_ids), key : "", val : ""});
		let param = tink_pure_List.append(tink_state_State.get_value(this.__coco_params),newp);
		this.__coco_params.set(param);
	}
	removeParam(id) {
		haxe_Log.trace("remove param " + id,{ fileName : "src/general_tools/apitest/APITester.hx", lineNumber : 97, className : "general_tools.apitest.APITester", methodName : "removeParam"});
		let param = tink_pure_List.filter(tink_state_State.get_value(this.__coco_params),function(i) {
			if(i.id != id) {
				return 1;
			} else {
				return 0;
			}
		});
		this.__coco_params.set(param);
	}
	setParamKey(id,val) {
		let old_p = hawk_util_OptionX.sure(tink_pure_List.first(tink_state_State.get_value(this.__coco_params),function(p) {
			return p.id == id;
		}));
		let new_p = new general_$tools_apitest_Param({ id : old_p.id, key : val, val : old_p.val});
		let param = tink_pure_List.replace(tink_state_State.get_value(this.__coco_params),tink_pure__$List_ReplaceSelector.const(old_p),tink_pure__$List_ReplaceGenerator.const(new_p));
		this.__coco_params.set(param);
	}
	setParamVal(id,val) {
		let old_p = hawk_util_OptionX.sure(tink_pure_List.first(tink_state_State.get_value(this.__coco_params),function(p) {
			return p.id == id;
		}));
		let new_p = new general_$tools_apitest_Param({ id : old_p.id, key : old_p.key, val : val});
		let param = tink_pure_List.replace(tink_state_State.get_value(this.__coco_params),tink_pure__$List_ReplaceSelector.const(old_p),tink_pure__$List_ReplaceGenerator.const(new_p));
		this.__coco_params.set(param);
	}
	validURL(str) {
		if(str.length <= 3) {
			return false;
		}
		return true;
	}
	render() {
		let _gthis = this;
		let this1 = { f : function() {
			let __r = [];
			let hxxMeta = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta.ref,hxxMeta.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"This page is a simple tool for testing your app while in development.  Basically Postman in your app",null)]));
			let hxxMeta1 = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H2,hxxMeta1.ref,hxxMeta1.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Request",null)]));
			let this1 = { f : function() {
				return function(meth) {
					_gthis.__coco_apiMethod.set(meth);
				};
			}};
			__r.push(general_$tools_apitest_MethodNav.fromHxx({ },{ setMeth : tink_state_Observable.auto(this1)}));
			let this2 = tink_state_Observable.auto({ f : function() {
				return general_$tools_InputType.Text;
			}});
			__r.push(general_$tools_MyTextInput.fromHxx({ },{ type : this2, placeholder : tink_state_Observable.const("URL"), onTextChange : tink_state_Observable.auto({ f : function() {
				return $bind(_gthis,_gthis.setUrl);
			}})}));
			let this3 = tink_state_Observable.auto({ f : function() {
				return general_$tools_InputType.Text;
			}});
			__r.push(general_$tools_MyTextInput.fromHxx({ },{ type : this3, placeholder : tink_state_Observable.const("Authorization"), onTextChange : tink_state_Observable.auto({ f : function() {
				return $bind(_gthis,_gthis.setAuth);
			}})}));
			if(tink_state_State.get_value(_gthis.__coco_apiMethod) == "POST") {
				let _gthis1 = _gthis.__coco_params;
				let this1 = tink_state_Observable.auto({ f : function() {
					return $bind(_gthis,_gthis.addParam);
				}});
				let this2 = tink_state_Observable.auto({ f : function() {
					return $bind(_gthis,_gthis.removeParam);
				}});
				let this3 = tink_state_Observable.auto({ f : function() {
					return $bind(_gthis,_gthis.setParamKey);
				}});
				__r.push(general_$tools_apitest_PostParamsView.fromHxx({ },{ params : _gthis1, addParam : this1, removeParam : this2, setParamKey : this3, setParamVal : tink_state_Observable.auto({ f : function() {
					return $bind(_gthis,_gthis.setParamVal);
				}})}));
			}
			if(_gthis.validURL(tink_state_State.get_value(_gthis.__coco_url))) {
				let this1 = tink_state_Observable.auto({ f : function() {
					return $bind(_gthis,_gthis.onSend);
				}});
				let this2 = { f : function() {
					let __r = [];
					__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Send ",null));
					let s = tink_state_State.get_value(_gthis.__coco_apiMethod);
					__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null));
					return __r;
				}};
				__r.push(bootstrap_Button.fromHxx({ },{ onclick : this1, children : tink_state_Observable.auto(this2)}));
			} else {
				let this1 = { f : function() {
					let __r = [];
					__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Send ",null));
					let s = tink_state_State.get_value(_gthis.__coco_apiMethod);
					__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null));
					return __r;
				}};
				__r.push(bootstrap_Button.fromHxx({ },{ disabled : tink_state_Observable.const(true), children : tink_state_Observable.auto(this1)}));
			}
			let hxxMeta2 = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H2,hxxMeta2.ref,hxxMeta2.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Responses",null)]));
			let this4 = tink_state_Observable.auto({ f : function() {
				return $bind(_gthis,_gthis.clearResponses);
			}});
			__r.push(bootstrap_Button.fromHxx({ },{ onclick : this4, children : tink_state_Observable.auto({ f : function() {
				return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Clear",null)];
			}})}));
			let this5 = { f : function() {
				return tink_pure_List.toArray(tink_state_State.get_value(_gthis.__coco_responses));
			}};
			__r.push(general_$tools_apitest_ResponsesView.fromHxx({ },{ responses : tink_state_Observable.auto(this5)}));
			return __r;
		}};
		return bootstrap_Container.fromHxx({ },{ children : tink_state_Observable.auto(this1)});
	}
	__initAttributes(attributes) {
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(general_$tools_apitest_APITester.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
general_$tools_apitest_APITester.__name__ = true;
general_$tools_apitest_APITester.__super__ = coconut_vdom_View;
Object.assign(general_$tools_apitest_APITester.prototype, {
	__class__: general_$tools_apitest_APITester
	,__coco_url: null
	,__coco_auth: null
	,__coco_params: null
	,__coco_param_ids: null
	,__coco_apiMethod: null
	,__coco_responses: null
});
class general_$tools_apitest_MethodNav extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_setMeth = new coconut_ui_tools_Slot(this,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	setMeth(a0) {
		(tink_state_Observable.get_value(this.__coco_setMeth))(a0);
	}
	setGet(_) {
		this.setMeth("GET");
	}
	setPost(_) {
		this.setMeth("POST");
	}
	render() {
		let _gthis = this;
		let hxxMeta = { };
		let __r = [];
		let tmp = tink_state_Observable.auto({ f : function() {
			return $bind(_gthis,_gthis.setGet);
		}});
		__r.push(bootstrap_Button.fromHxx({ },{ onclick : tmp, children : tink_state_Observable.auto({ f : function() {
			return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"GET",null)];
		}})}));
		let tmp1 = tink_state_Observable.auto({ f : function() {
			return $bind(_gthis,_gthis.setPost);
		}});
		__r.push(bootstrap_Button.fromHxx({ },{ onclick : tmp1, children : tink_state_Observable.auto({ f : function() {
			return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"POST",null)];
		}})}));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	__initAttributes(attributes) {
		this.__coco_setMeth.setData(attributes.setMeth);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(general_$tools_apitest_MethodNav.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
general_$tools_apitest_MethodNav.__name__ = true;
general_$tools_apitest_MethodNav.__super__ = coconut_vdom_View;
Object.assign(general_$tools_apitest_MethodNav.prototype, {
	__class__: general_$tools_apitest_MethodNav
	,__coco_setMeth: null
});
class general_$tools_apitest_FormattedText extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_val = new coconut_ui_tools_Slot(this,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		let lines = tink_state_Observable.get_value(this.__coco_val).split("\n");
		let hxxMeta = { };
		let __r = [];
		let _g = 0;
		while(_g < lines.length) {
			let hxxMeta = { };
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.PRE,hxxMeta.ref,hxxMeta.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,lines[_g++],null)]));
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	__initAttributes(attributes) {
		this.__coco_val.setData(attributes.val);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(general_$tools_apitest_FormattedText.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
general_$tools_apitest_FormattedText.__name__ = true;
general_$tools_apitest_FormattedText.__super__ = coconut_vdom_View;
Object.assign(general_$tools_apitest_FormattedText.prototype, {
	__class__: general_$tools_apitest_FormattedText
	,__coco_val: null
});
class general_$tools_apitest_Param {
	constructor(__coco_init) {
		this._updatePerformed = tink_core_Signal.trigger();
		this.annex = new coconut_data_helpers_Annex(this);
		this.id = __coco_init.id;
		this.key = __coco_init.key;
		this.val = __coco_init.val;
		this.__coco_transitionCount = new tink_state__$State_SimpleState(0,null,null);
		this.errorTrigger = tink_core_Signal.trigger();
		this.transitionErrors = this.errorTrigger;
		this.observables = { id : tink_state_Observable.const(this.id), key : tink_state_Observable.const(this.key), val : tink_state_Observable.const(this.val), isInTransition : tink_state_Observable.map(this.__coco_transitionCount,tink_state_Transform.plain(function(count) {
			return count > 0;
		}))};
	}
}
general_$tools_apitest_Param.__name__ = true;
general_$tools_apitest_Param.__interfaces__ = [coconut_data_Model];
Object.assign(general_$tools_apitest_Param.prototype, {
	__class__: general_$tools_apitest_Param
	,id: null
	,key: null
	,val: null
	,_updatePerformed: null
	,observables: null
	,transitionErrors: null
	,errorTrigger: null
	,__coco_transitionCount: null
	,annex: null
});
class general_$tools_apitest_PostParamsView extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_params = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_addParam = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_removeParam = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_setParamKey = new coconut_ui_tools_Slot(this,null,null);
		this.__coco_setParamVal = new coconut_ui_tools_Slot(this,null,null);
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	addParam() {
		(tink_state_Observable.get_value(this.__coco_addParam))();
	}
	removeParam(a0) {
		(tink_state_Observable.get_value(this.__coco_removeParam))(a0);
	}
	setParamKey(a0,a1) {
		(tink_state_Observable.get_value(this.__coco_setParamKey))(a0,a1);
	}
	setParamVal(a0,a1) {
		(tink_state_Observable.get_value(this.__coco_setParamVal))(a0,a1);
	}
	render() {
		let _gthis = this;
		let hxxMeta = { };
		let __r = [];
		let tmp = tink_state_Observable.auto({ f : function() {
			return function(_) {
				_gthis.addParam();
			};
		}});
		__r.push(bootstrap_Button.fromHxx({ },{ onclick : tmp, children : tink_state_Observable.auto({ f : function() {
			return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Add Param",null)];
		}})}));
		let this1 = { f : function() {
			return function(__data__) {
				let item = $bind(__data__,__data__.item);
				let __r = [];
				let _g = new tink_pure_NodeIterator(tink_state_Observable.get_value(_gthis.__coco_params));
				while(_g.list.length > 0) {
					let p = _g.next();
					let __r1 = [];
					let this1 = { f : function() {
						let __r = [];
						let this1 = { f : function() {
							return [coconut_vdom_RenderResult.ofInt(p.id)];
						}};
						__r.push(bootstrap_Col.fromHxx({ },{ children : tink_state_Observable.auto(this1)}));
						let this2 = { f : function() {
							let this1 = tink_state_Observable.auto({ f : function() {
								return general_$tools_InputType.Text;
							}});
							let this2 = { f : function() {
								return function(v) {
									_gthis.setParamKey(p.id,v);
								};
							}};
							return [general_$tools_MyTextInput.fromHxx({ },{ type : this1, placeholder : tink_state_Observable.const("key"), onTextChange : tink_state_Observable.auto(this2)})];
						}};
						__r.push(bootstrap_Col.fromHxx({ },{ children : tink_state_Observable.auto(this2)}));
						let this3 = { f : function() {
							let this1 = tink_state_Observable.auto({ f : function() {
								return general_$tools_InputType.Text;
							}});
							let this2 = { f : function() {
								return function(v) {
									_gthis.setParamVal(p.id,v);
								};
							}};
							return [general_$tools_MyTextInput.fromHxx({ },{ type : this1, placeholder : tink_state_Observable.const("value"), onTextChange : tink_state_Observable.auto(this2)})];
						}};
						__r.push(bootstrap_Col.fromHxx({ },{ children : tink_state_Observable.auto(this3)}));
						return __r;
					}};
					__r1.push(bootstrap_Row.fromHxx({ },{ children : tink_state_Observable.auto(this1)}));
					let this2 = tink_state_Observable.auto({ f : function() {
						return function(event) {
							_gthis.removeParam(p.id);
						};
					}});
					__r1.push(bootstrap_Button.fromHxx({ },{ onclick : this2, children : tink_state_Observable.auto({ f : function() {
						return [coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Remove",null)];
					}})}));
					__r.push(item({ children : __r1}));
				}
				return __r;
			};
		}};
		__r.push(bootstrap_ListGroup.fromHxx({ },{ className : tink_state_Observable.const(tink_domspec_ClassName.ofString("mb-1")), items : tink_state_Observable.auto(this1)}));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ },__r);
	}
	__initAttributes(attributes) {
		this.__coco_params.setData(attributes.params);
		this.__coco_addParam.setData(attributes.addParam);
		this.__coco_removeParam.setData(attributes.removeParam);
		this.__coco_setParamKey.setData(attributes.setParamKey);
		this.__coco_setParamVal.setData(attributes.setParamVal);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(general_$tools_apitest_PostParamsView.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
general_$tools_apitest_PostParamsView.__name__ = true;
general_$tools_apitest_PostParamsView.__super__ = coconut_vdom_View;
Object.assign(general_$tools_apitest_PostParamsView.prototype, {
	__class__: general_$tools_apitest_PostParamsView
	,__coco_params: null
	,__coco_addParam: null
	,__coco_removeParam: null
	,__coco_setParamKey: null
	,__coco_setParamVal: null
});
class general_$tools_apitest_ResponsesView extends coconut_vdom_View {
	constructor(__coco_data_) {
		coconut_diffing_Widget._hx_skip_constructor = true;
		super();
		coconut_diffing_Widget._hx_skip_constructor = false;
		this._hx_constructor(__coco_data_);
	}
	_hx_constructor(__coco_data_) {
		this.__coco_responses = new coconut_ui_tools_Slot(this,null,tink_state_Observable.auto({ f : function() {
			return [];
		}}));
		this.__initAttributes(__coco_data_);
		super._hx_constructor($bind(this,this.render),null,null,null,null);
	}
	render() {
		let _gthis = this;
		let this1 = { f : function() {
			return function(__data__) {
				let item = $bind(__data__,__data__.item);
				let __r = [];
				let _g = 0;
				let _g1 = tink_state_Observable.get_value(_gthis.__coco_responses);
				while(_g < _g1.length) {
					let r = _g1[_g++];
					__r.push(item({ children : [general_$tools_apitest_FormattedText.fromHxx({ },{ val : tink_state_Observable.auto({ f : function() {
						return r;
					}})})]}));
				}
				return __r;
			};
		}};
		return bootstrap_ListGroup.fromHxx({ },{ className : tink_state_Observable.const(tink_domspec_ClassName.ofString("mb-1")), items : tink_state_Observable.auto(this1)});
	}
	__initAttributes(attributes) {
		this.__coco_responses.setData(attributes.responses);
	}
	static fromHxx(hxxMeta,attributes) {
		return coconut_diffing_VNodeData.VWidget(general_$tools_apitest_ResponsesView.__type,hxxMeta.ref,hxxMeta.key,attributes);
	}
}
general_$tools_apitest_ResponsesView.__name__ = true;
general_$tools_apitest_ResponsesView.__super__ = coconut_vdom_View;
Object.assign(general_$tools_apitest_ResponsesView.prototype, {
	__class__: general_$tools_apitest_ResponsesView
	,__coco_responses: null
});
class hawk_core_UUID {
	static _new(str) {
		return str;
	}
	static fromString(s) {
		return hawk_core_UUID._new(s);
	}
	static toString(this1) {
		return this1;
	}
}
class hawk_datatypes_Email {
	static _new(str) {
		return str;
	}
	static toString(this1) {
		return this1;
	}
	static createValid(str) {
		str = StringTools.trim(str);
		if(str.length > 128) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(null,"email must be less than 128 chars",{ fileName : "hawk/datatypes/Email.hx", lineNumber : 54, className : "hawk.datatypes._Email.Email_Impl_", methodName : "createValid"}));
		}
		if(!hawk_datatypes_Email._regex.match(str)) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(null,"invalid email address",{ fileName : "hawk/datatypes/Email.hx", lineNumber : 58, className : "hawk.datatypes._Email.Email_Impl_", methodName : "createValid"}));
		}
		return tink_core_Outcome.Success(hawk_datatypes_Email._new(str));
	}
}
class hawk_datatypes_Password {
	static _new(str) {
		return str;
	}
	static createValid(str) {
		str = StringTools.trim(str);
		if(str.length < 8) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(null,"password must be at least 8 characters",{ fileName : "hawk/datatypes/Password.hx", lineNumber : 40, className : "hawk.datatypes._Password.Password_Impl_", methodName : "createValid"}));
		}
		if(str.length > 128) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(null,"password must be less than 128 chars",{ fileName : "hawk/datatypes/Password.hx", lineNumber : 43, className : "hawk.datatypes._Password.Password_Impl_", methodName : "createValid"}));
		}
		return tink_core_Outcome.Success(hawk_datatypes_Password._new(str));
	}
}
class hawk_datatypes_Timestamp {
	static _new(v) {
		return v;
	}
	static fromUInt(v) {
		return hawk_datatypes_Timestamp._new(v);
	}
}
class hawk_util_Json {
	static mapToJson(map) {
		let res = "{";
		let kv = map.keyValueIterator();
		while(kv.hasNext()) {
			let kv1 = kv.next();
			res += "\"" + kv1.key + "\":\"" + kv1.value + "\",";
		}
		res = HxOverrides.substr(res,0,res.length - 1);
		res += "}";
		return res;
	}
	static anonToJson(obj) {
		return hawk_util_Json.mapToJson(new thx_AnonymousMap(obj));
	}
	static jsonToAnonMap(json) {
		return new thx_AnonymousMap(JSON.parse(json));
	}
}
hawk_util_Json.__name__ = true;
class hawk_util_OptionX {
	static sure(o) {
		switch(o._hx_index) {
		case 0:
			return o.v;
		case 1:
			throw haxe_Exception.thrown("expected option to be Some");
		}
	}
}
hawk_util_OptionX.__name__ = true;
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	get_native() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = true;
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
	,__skipStack: null
	,__nativeException: null
	,__previousException: null
});
class haxe_Log {
	static formatOutput(v,infos) {
		let str = Std.string(v);
		if(infos == null) {
			return str;
		}
		let pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos.customParams != null) {
			let _g = 0;
			let _g1 = infos.customParams;
			while(_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		let str = haxe_Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
haxe_Log.__name__ = true;
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
	,value: null
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let code = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			let buf = new Uint8Array(s.length << 1);
			let _g = 0;
			let _g1 = s.length;
			while(_g < _g1) {
				let i = _g++;
				let c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		let a = [];
		let i = 0;
		while(i < s.length) {
			let c = s.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				a.push(c);
			} else if(c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if(c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		let hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
}
haxe_io_Bytes.__name__ = true;
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
	,length: null
	,b: null
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
class haxe_ds_BalancedTree {
	constructor() {
	}
	set(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	get(key) {
		let node = this.root;
		while(node != null) {
			let c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	exists(key) {
		let node = this.root;
		while(node != null) {
			let c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	keys() {
		let ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	setLoop(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		let c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			return this.balance(this.setLoop(k,v,node.left),node.key,node.value,node.right);
		} else {
			let nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	keysLoop(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	balance(l,k,v,r) {
		let hl = l == null ? 0 : l._height;
		let hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			let _this = l.left;
			let _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			let _this = r.right;
			let _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	compare(k1,k2) {
		return Reflect.compare(k1,k2);
	}
}
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_BalancedTree.prototype, {
	__class__: haxe_ds_BalancedTree
	,root: null
});
class haxe_ds_TreeNode {
	constructor(l,k,v,r,h) {
		if(h == null) {
			h = -1;
		}
		this.left = l;
		this.key = k;
		this.value = v;
		this.right = r;
		if(h == -1) {
			let tmp;
			let _this = this.left;
			let _this1 = this.right;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				let _this = this.left;
				tmp = _this == null ? 0 : _this._height;
			} else {
				let _this = this.right;
				tmp = _this == null ? 0 : _this._height;
			}
			this._height = tmp + 1;
		} else {
			this._height = h;
		}
	}
}
haxe_ds_TreeNode.__name__ = true;
Object.assign(haxe_ds_TreeNode.prototype, {
	__class__: haxe_ds_TreeNode
	,left: null
	,right: null
	,key: null
	,value: null
	,_height: null
});
class haxe_ds_EnumValueMap extends haxe_ds_BalancedTree {
	constructor() {
		super();
	}
	compare(k1,k2) {
		let d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		let p1 = Type.enumParameters(k1);
		let p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	compareArgs(a1,a2) {
		let ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		let _g = 0;
		let _g1 = a1.length;
		while(_g < _g1) {
			let i = _g++;
			let d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	compareArg(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
}
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
Object.assign(haxe_ds_EnumValueMap.prototype, {
	__class__: haxe_ds_EnumValueMap
});
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
haxe_ds__$List_ListNode.__name__ = true;
Object.assign(haxe_ds__$List_ListNode.prototype, {
	__class__: haxe_ds__$List_ListNode
	,item: null
	,next: null
});
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	get(key) {
		return this.h[key];
	}
	keys() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	keyValueIterator() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	static keysIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			return keys[idx - 1];
		}};
	}
	static valueIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			return h[keys[idx - 1]];
		}};
	}
	static kvIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			let k = keys[idx - 1];
			return { key : k, value : h[k]};
		}};
	}
}
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
	,h: null
});
class haxe_format_JsonPrinter {
	constructor(replacer,space) {
		this.replacer = replacer;
		this.indent = space;
		this.pretty = space != null;
		this.nind = 0;
		this.buf = new StringBuf();
	}
	write(k,v) {
		if(this.replacer != null) {
			v = this.replacer(k,v);
		}
		let _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "null";
			break;
		case 1:
			this.buf.b += Std.string(v);
			break;
		case 2:
			let v1 = isFinite(v) ? Std.string(v) : "null";
			this.buf.b += Std.string(v1);
			break;
		case 3:
			this.buf.b += Std.string(v);
			break;
		case 4:
			this.fieldsString(v,Reflect.fields(v));
			break;
		case 5:
			this.buf.b += "\"<fun>\"";
			break;
		case 6:
			let c = _g.c;
			if(c == String) {
				this.quote(v);
			} else if(c == Array) {
				let v1 = v;
				this.buf.b += String.fromCodePoint(91);
				let len = v1.length;
				let last = len - 1;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let i = _g++;
					if(i > 0) {
						this.buf.b += String.fromCodePoint(44);
					} else {
						this.nind++;
					}
					if(this.pretty) {
						this.buf.b += String.fromCodePoint(10);
					}
					if(this.pretty) {
						this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
					}
					this.write(i,v1[i]);
					if(i == last) {
						this.nind--;
						if(this.pretty) {
							this.buf.b += String.fromCodePoint(10);
						}
						if(this.pretty) {
							this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
						}
					}
				}
				this.buf.b += String.fromCodePoint(93);
			} else if(c == haxe_ds_StringMap) {
				let v1 = v;
				let o = { };
				let k = haxe_ds_StringMap.keysIterator(v1.h);
				while(k.hasNext()) {
					let k1 = k.next();
					o[k1] = v1.h[k1];
				}
				let v2 = o;
				this.fieldsString(v2,Reflect.fields(v2));
			} else if(c == Date) {
				this.quote(HxOverrides.dateStr(v));
			} else {
				this.classString(v);
			}
			break;
		case 7:
			this.buf.b += Std.string(v._hx_index);
			break;
		case 8:
			this.buf.b += "\"???\"";
			break;
		}
	}
	classString(v) {
		this.fieldsString(v,Type.getInstanceFields(js_Boot.getClass(v)));
	}
	fieldsString(v,fields) {
		this.buf.b += String.fromCodePoint(123);
		let len = fields.length;
		let last = len - 1;
		let first = true;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			let f = fields[i];
			let value = Reflect.field(v,f);
			if(Reflect.isFunction(value)) {
				continue;
			}
			if(first) {
				this.nind++;
				first = false;
			} else {
				this.buf.b += String.fromCodePoint(44);
			}
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(10);
			}
			if(this.pretty) {
				this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
			}
			this.quote(f);
			this.buf.b += String.fromCodePoint(58);
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(32);
			}
			this.write(f,value);
			if(i == last) {
				this.nind--;
				if(this.pretty) {
					this.buf.b += String.fromCodePoint(10);
				}
				if(this.pretty) {
					this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
				}
			}
		}
		this.buf.b += String.fromCodePoint(125);
	}
	quote(s) {
		this.buf.b += String.fromCodePoint(34);
		let i = 0;
		while(true) {
			let c = s.charCodeAt(i++);
			if(c != c) {
				break;
			}
			switch(c) {
			case 8:
				this.buf.b += "\\b";
				break;
			case 9:
				this.buf.b += "\\t";
				break;
			case 10:
				this.buf.b += "\\n";
				break;
			case 12:
				this.buf.b += "\\f";
				break;
			case 13:
				this.buf.b += "\\r";
				break;
			case 34:
				this.buf.b += "\\\"";
				break;
			case 92:
				this.buf.b += "\\\\";
				break;
			default:
				this.buf.b += String.fromCodePoint(c);
			}
		}
		this.buf.b += String.fromCodePoint(34);
	}
	static print(o,replacer,space) {
		let printer = new haxe_format_JsonPrinter(replacer,space);
		printer.write("",o);
		return printer.buf.b;
	}
}
haxe_format_JsonPrinter.__name__ = true;
Object.assign(haxe_format_JsonPrinter.prototype, {
	__class__: haxe_format_JsonPrinter
	,buf: null
	,replacer: null
	,indent: null
	,pretty: null
	,nind: null
});
class haxe_http_HttpBase {
	constructor(url) {
		if(haxe_http_HttpBase._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(url);
	}
	_hx_constructor(url) {
		this.url = url;
		this.headers = [];
		this.params = [];
		this.emptyOnData = $bind(this,this.onData);
	}
	setHeader(name,value) {
		let _g = 0;
		let _g1 = this.headers.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.headers[i].name == name) {
				this.headers[i] = { name : name, value : value};
				return;
			}
		}
		this.headers.push({ name : name, value : value});
	}
	setPostData(data) {
		this.postData = data;
		this.postBytes = null;
	}
	onData(data) {
	}
	onBytes(data) {
	}
	onError(msg) {
	}
	onStatus(status) {
	}
	hasOnData() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	success(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	get_responseData() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
}
haxe_http_HttpBase.__name__ = true;
Object.assign(haxe_http_HttpBase.prototype, {
	__class__: haxe_http_HttpBase
	,url: null
	,responseBytes: null
	,responseAsString: null
	,postData: null
	,postBytes: null
	,headers: null
	,params: null
	,emptyOnData: null
});
class haxe_http_HttpJs extends haxe_http_HttpBase {
	constructor(url) {
		haxe_http_HttpBase._hx_skip_constructor = true;
		super();
		haxe_http_HttpBase._hx_skip_constructor = false;
		this._hx_constructor(url);
	}
	_hx_constructor(url) {
		this.async = true;
		this.withCredentials = false;
		super._hx_constructor(url);
	}
	request(post) {
		this.responseAsString = null;
		this.responseBytes = null;
		let r = this.req = js_Browser.createXMLHttpRequest();
		let _gthis = this;
		let onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			let s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s == 0 && typeof(window) != "undefined" && $global.location != null) {
				let protocol = $global.location.protocol.toLowerCase();
				if(new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","").match(protocol)) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				let onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					let onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		let _g = this.postBytes;
		let _g1 = this.postData;
		let uri = _g1 == null ? _g == null ? null : new Blob([_g.b.bufferValue]) : _g == null ? _g1 : null;
		if(uri != null) {
			post = true;
		} else {
			let _g = 0;
			let _g1 = this.params;
			while(_g < _g1.length) {
				let p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				let s = p.name;
				let value = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				let s1 = p.value;
				uri = value + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				r.open("GET",this.url + (this.url.split("?").length <= 1 ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(_g1.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		let _g2 = 0;
		let _g3 = this.headers;
		while(_g2 < _g3.length) {
			let h = _g3[_g2];
			++_g2;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
}
haxe_http_HttpJs.__name__ = true;
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
Object.assign(haxe_http_HttpJs.prototype, {
	__class__: haxe_http_HttpJs
	,async: null
	,withCredentials: null
	,req: null
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
	,array: null
	,current: null
});
class haxe_iterators_MapKeyValueIterator {
	constructor(map) {
		this.map = map;
		this.keys = map.keys();
	}
	hasNext() {
		return this.keys.hasNext();
	}
	next() {
		let key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
}
haxe_iterators_MapKeyValueIterator.__name__ = true;
Object.assign(haxe_iterators_MapKeyValueIterator.prototype, {
	__class__: haxe_iterators_MapKeyValueIterator
	,map: null
	,keys: null
});
class httpstatus_HttpStatusMessage {
	static fromCode(statusCode) {
		switch(statusCode) {
		case 100:
			return "Continue";
		case 101:
			return "Switching Protocols";
		case 102:
			return "Processing";
		case 200:
			return "OK";
		case 201:
			return "Created";
		case 202:
			return "Accepted";
		case 203:
			return "Non-Authoritative Information";
		case 204:
			return "No Content";
		case 205:
			return "Reset Content";
		case 206:
			return "Partial Content";
		case 207:
			return "Multi-Status";
		case 208:
			return "Already Reported";
		case 226:
			return "IM Used";
		case 300:
			return "Multiple Choices";
		case 301:
			return "Moved Permanently";
		case 302:
			return "Found";
		case 303:
			return "See Other";
		case 304:
			return "Not Modified";
		case 305:
			return "Use Proxy";
		case 306:
			return "Switch Proxy";
		case 307:
			return "Temporary Redirect";
		case 308:
			return "Permanent Redirect";
		case 400:
			return "Bad Request";
		case 401:
			return "Unauthorized";
		case 402:
			return "Payment Required";
		case 403:
			return "Forbidden";
		case 404:
			return "Not Found";
		case 405:
			return "Method Not Allowed";
		case 406:
			return "Not Acceptable";
		case 407:
			return "Proxy Authentication Required";
		case 408:
			return "Request Timeout";
		case 409:
			return "Conflict";
		case 410:
			return "Gone";
		case 411:
			return "Length Required";
		case 412:
			return "Precondition Failed";
		case 413:
			return "Payload Too Large";
		case 414:
			return "URI Too Long";
		case 415:
			return "Unsupported Media Type";
		case 416:
			return "Range Not Satisfiable";
		case 417:
			return "Expectation Failed";
		case 418:
			return "I'm a teapot";
		case 421:
			return "Misdirected Request";
		case 422:
			return "Unprocessable Entity";
		case 423:
			return "Locked";
		case 424:
			return "Failed Dependency";
		case 426:
			return "Upgrade Required";
		case 428:
			return "Precondition Required";
		case 429:
			return "Too Many Requests";
		case 431:
			return "Request Header Fields Too Large";
		case 451:
			return "Unavailable For Legal Reasons";
		case 500:
			return "Internal Server Error";
		case 501:
			return "Not Implemented";
		case 502:
			return "Bad Gateway";
		case 503:
			return "Service Unavailable";
		case 504:
			return "Gateway Timeout";
		case 505:
			return "HTTP Version Not Supported";
		case 506:
			return "Variant Also Negotiates";
		case 507:
			return "Insufficient Storage";
		case 508:
			return "Loop Detected";
		case 510:
			return "Not Extended";
		case 511:
			return "Network Authentication Required";
		default:
			return "Unknown Status";
		}
	}
}
class hxjsonast_Error {
	constructor(message,pos) {
		this.message = message;
		this.pos = pos;
	}
}
hxjsonast_Error.__name__ = true;
Object.assign(hxjsonast_Error.prototype, {
	__class__: hxjsonast_Error
	,message: null
	,pos: null
});
class hxjsonast_Json {
	constructor(value,pos) {
		this.value = value;
		this.pos = pos;
	}
}
hxjsonast_Json.__name__ = true;
Object.assign(hxjsonast_Json.prototype, {
	__class__: hxjsonast_Json
	,value: null
	,pos: null
});
var hxjsonast_JsonValue = $hxEnums["hxjsonast.JsonValue"] = { __ename__ : true, __constructs__ : ["JString","JNumber","JObject","JArray","JBool","JNull"]
	,JString: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["s"],$_)
	,JNumber: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["s"],$_)
	,JObject: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,JArray: ($_=function(values) { return {_hx_index:3,values:values,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["values"],$_)
	,JBool: ($_=function(b) { return {_hx_index:4,b:b,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["b"],$_)
	,JNull: {_hx_index:5,__enum__:"hxjsonast.JsonValue",toString:$estr}
};
class hxjsonast_JObjectField {
	constructor(name,namePos,value) {
		this.name = name;
		this.namePos = namePos;
		this.value = value;
	}
}
hxjsonast_JObjectField.__name__ = true;
Object.assign(hxjsonast_JObjectField.prototype, {
	__class__: hxjsonast_JObjectField
	,name: null
	,namePos: null
	,value: null
});
class hxjsonast_Parser {
	constructor(source,filename) {
		this.source = source;
		this.filename = filename;
		this.pos = 0;
	}
	parseRec() {
		while(true) {
			let c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				let save = this.pos;
				return new hxjsonast_Json(hxjsonast_JsonValue.JString(this.parseString()),new hxjsonast_Position(this.filename,save - 1,this.pos));
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				let start = this.pos - 1;
				let minus = c == 45;
				let digit = !minus;
				let zero = c == 48;
				let point = false;
				let e = false;
				let pm = false;
				let end = false;
				while(true) {
					switch(this.source.charCodeAt(this.pos++)) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
					if(end) {
						break;
					}
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JNumber(HxOverrides.substr(this.source,start,this.pos - start)),new hxjsonast_Position(this.filename,start,this.pos));
			case 91:
				let values = [];
				let comma = null;
				let startPos = this.pos - 1;
				while(true) switch(this.source.charCodeAt(this.pos++)) {
				case 9:case 10:case 13:case 32:
					break;
				case 44:
					if(comma) {
						comma = false;
					} else {
						this.invalidChar();
					}
					break;
				case 93:
					if(comma == false) {
						this.invalidChar();
					}
					return new hxjsonast_Json(hxjsonast_JsonValue.JArray(values),new hxjsonast_Position(this.filename,startPos,this.pos));
				default:
					if(comma) {
						this.invalidChar();
					}
					this.pos--;
					values.push(this.parseRec());
					comma = true;
				}
				break;
			case 102:
				let save1 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 97 || this.source.charCodeAt(this.pos++) != 108 || this.source.charCodeAt(this.pos++) != 115 || this.source.charCodeAt(this.pos++) != 101) {
					this.pos = save1;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JBool(false),new hxjsonast_Position(this.filename,save1 - 1,this.pos));
			case 110:
				let save2 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 117 || this.source.charCodeAt(this.pos++) != 108 || this.source.charCodeAt(this.pos++) != 108) {
					this.pos = save2;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position(this.filename,save2 - 1,this.pos));
			case 116:
				let save3 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 114 || this.source.charCodeAt(this.pos++) != 117 || this.source.charCodeAt(this.pos++) != 101) {
					this.pos = save3;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JBool(true),new hxjsonast_Position(this.filename,save3 - 1,this.pos));
			case 123:
				let fields = [];
				let names_h = Object.create(null);
				let field = null;
				let fieldPos = null;
				let comma1 = null;
				let startPos1 = this.pos - 1;
				while(true) switch(this.source.charCodeAt(this.pos++)) {
				case 9:case 10:case 13:case 32:
					break;
				case 34:
					if(comma1) {
						this.invalidChar();
					}
					let fieldStartPos = this.pos - 1;
					field = this.parseString();
					fieldPos = new hxjsonast_Position(this.filename,fieldStartPos,this.pos);
					if(Object.prototype.hasOwnProperty.call(names_h,field)) {
						throw haxe_Exception.thrown(new hxjsonast_Error("Duplicate field name \"" + field + "\"",fieldPos));
					} else {
						names_h[field] = true;
					}
					break;
				case 44:
					if(comma1) {
						comma1 = false;
					} else {
						this.invalidChar();
					}
					break;
				case 58:
					if(field == null) {
						this.invalidChar();
					}
					fields.push(new hxjsonast_JObjectField(field,fieldPos,this.parseRec()));
					field = null;
					fieldPos = null;
					comma1 = true;
					break;
				case 125:
					if(field != null || comma1 == false) {
						this.invalidChar();
					}
					return new hxjsonast_Json(hxjsonast_JsonValue.JObject(fields),new hxjsonast_Position(this.filename,startPos1,this.pos));
				default:
					this.invalidChar();
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	parseString() {
		let start = this.pos;
		let buf = null;
		while(true) {
			let c = this.source.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				let s = this.source;
				let len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.source.charCodeAt(this.pos++);
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCodePoint(c);
					break;
				case 98:
					buf.b += String.fromCodePoint(8);
					break;
				case 102:
					buf.b += String.fromCodePoint(12);
					break;
				case 110:
					buf.b += String.fromCodePoint(10);
					break;
				case 114:
					buf.b += String.fromCodePoint(13);
					break;
				case 116:
					buf.b += String.fromCodePoint(9);
					break;
				case 117:
					let uc = Std.parseInt("0x" + HxOverrides.substr(this.source,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCodePoint(uc);
					break;
				default:
					throw haxe_Exception.thrown(new hxjsonast_Error("Invalid escape sequence \\" + String.fromCodePoint(c),new hxjsonast_Position(this.filename,this.pos - 2,this.pos)));
				}
				start = this.pos;
			} else if(c != c) {
				this.pos--;
				throw haxe_Exception.thrown(new hxjsonast_Error("Unclosed string",new hxjsonast_Position(this.filename,start - 1,this.pos)));
			}
		}
		if(buf == null) {
			return HxOverrides.substr(this.source,start,this.pos - start - 1);
		} else {
			let s = this.source;
			let len = this.pos - start - 1;
			buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
			return buf.b;
		}
	}
	invalidChar() {
		this.pos--;
		throw haxe_Exception.thrown(new hxjsonast_Error("Invalid character: " + this.source.charAt(this.pos),new hxjsonast_Position(this.filename,this.pos,this.pos + 1)));
	}
	invalidNumber(start) {
		throw haxe_Exception.thrown(new hxjsonast_Error("Invalid number: " + this.source.substring(start,this.pos),new hxjsonast_Position(this.filename,start,this.pos)));
	}
}
hxjsonast_Parser.__name__ = true;
Object.assign(hxjsonast_Parser.prototype, {
	__class__: hxjsonast_Parser
	,source: null
	,filename: null
	,pos: null
});
class hxjsonast_Position {
	constructor(file,min,max) {
		this.file = file;
		this.min = min;
		this.max = max;
	}
}
hxjsonast_Position.__name__ = true;
Object.assign(hxjsonast_Position.prototype, {
	__class__: hxjsonast_Position
	,file: null
	,min: null
	,max: null
});
class js_Browser {
	static createXMLHttpRequest() {
		if(typeof XMLHttpRequest != "undefined") {
			return new XMLHttpRequest();
		}
		if(typeof ActiveXObject != "undefined") {
			return new ActiveXObject("Microsoft.XMLHTTP");
		}
		throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
	}
}
js_Browser.__name__ = true;
var json2object_Error = $hxEnums["json2object.Error"] = { __ename__ : true, __constructs__ : ["IncorrectType","IncorrectEnumValue","InvalidEnumConstructor","UninitializedVariable","UnknownVariable","ParserError","CustomFunctionException"]
	,IncorrectType: ($_=function(variable,expected,pos) { return {_hx_index:0,variable:variable,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["variable","expected","pos"],$_)
	,IncorrectEnumValue: ($_=function(value,expected,pos) { return {_hx_index:1,value:value,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["value","expected","pos"],$_)
	,InvalidEnumConstructor: ($_=function(value,expected,pos) { return {_hx_index:2,value:value,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["value","expected","pos"],$_)
	,UninitializedVariable: ($_=function(variable,pos) { return {_hx_index:3,variable:variable,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["variable","pos"],$_)
	,UnknownVariable: ($_=function(variable,pos) { return {_hx_index:4,variable:variable,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["variable","pos"],$_)
	,ParserError: ($_=function(message,pos) { return {_hx_index:5,message:message,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["message","pos"],$_)
	,CustomFunctionException: ($_=function(e,pos) { return {_hx_index:6,e:e,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["e","pos"],$_)
};
var json2object_InternalError = $hxEnums["json2object.InternalError"] = { __ename__ : true, __constructs__ : ["AbstractNoJsonRepresentation","CannotGenerateSchema","HandleExpr","ParsingThrow","UnsupportedAbstractEnumType","UnsupportedEnumAbstractValue","UnsupportedMapKeyType","UnsupportedSchemaObjectType","UnsupportedSchemaType"]
	,AbstractNoJsonRepresentation: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_.__params__ = ["name"],$_)
	,CannotGenerateSchema: ($_=function(name) { return {_hx_index:1,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_.__params__ = ["name"],$_)
	,HandleExpr: {_hx_index:2,__enum__:"json2object.InternalError",toString:$estr}
	,ParsingThrow: {_hx_index:3,__enum__:"json2object.InternalError",toString:$estr}
	,UnsupportedAbstractEnumType: ($_=function(name) { return {_hx_index:4,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_.__params__ = ["name"],$_)
	,UnsupportedEnumAbstractValue: ($_=function(name) { return {_hx_index:5,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_.__params__ = ["name"],$_)
	,UnsupportedMapKeyType: ($_=function(name) { return {_hx_index:6,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_.__params__ = ["name"],$_)
	,UnsupportedSchemaObjectType: ($_=function(name) { return {_hx_index:7,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_.__params__ = ["name"],$_)
	,UnsupportedSchemaType: ($_=function(type) { return {_hx_index:8,type:type,__enum__:"json2object.InternalError",toString:$estr}; },$_.__params__ = ["type"],$_)
};
class json2object_PositionUtils {
	constructor(content) {
		this.linesInfo = [];
		let s = 0;
		let e = 0;
		let i = 0;
		let lineCount = 0;
		while(i < content.length) switch(content.charAt(i)) {
		case "\n":
			e = i;
			this.linesInfo.push({ number : lineCount, start : s, end : e});
			++lineCount;
			++i;
			s = i;
			break;
		case "\r":
			e = i;
			if(content.charAt(i + 1) == "\n") {
				++e;
			}
			this.linesInfo.push({ number : lineCount, start : s, end : e});
			++lineCount;
			i = e + 1;
			s = i;
			break;
		default:
			++i;
		}
		this.linesInfo.push({ number : lineCount, start : s, end : i});
	}
	convertPosition(position) {
		let min = position.min;
		let max = position.max;
		let pos = { file : position.file, min : min + 1, max : max + 1, lines : []};
		let bounds_min = 0;
		let bounds_max = this.linesInfo.length - 1;
		if(min > this.linesInfo[0].end) {
			while(bounds_max > bounds_min) {
				let i = (bounds_min + bounds_max) / 2 | 0;
				let line = this.linesInfo[i];
				if(line.start == min) {
					bounds_min = i;
					bounds_max = i;
				}
				if(line.end < min) {
					bounds_min = i + 1;
				}
				if(line.start > min || line.end >= min && line.start < min) {
					bounds_max = i;
				}
			}
		}
		let _g = bounds_min;
		let _g1 = this.linesInfo.length;
		while(_g < _g1) {
			let line = this.linesInfo[_g++];
			if(line.start <= min && line.end >= max) {
				pos.lines.push({ number : line.number + 1, start : min - line.start + 1, end : max - line.start + 1});
				break;
			}
			if(line.start <= min && min <= line.end) {
				pos.lines.push({ number : line.number + 1, start : min - line.start + 1, end : line.end + 1});
			}
			if(line.start <= max && max <= line.end) {
				pos.lines.push({ number : line.number + 1, start : line.start + 1, end : max - line.start + 1});
			}
			if(line.start >= max || line.end >= max) {
				break;
			}
		}
		return pos;
	}
}
json2object_PositionUtils.__name__ = true;
Object.assign(json2object_PositionUtils.prototype, {
	__class__: json2object_PositionUtils
	,linesInfo: null
});
class thx_AnonymousMap {
	constructor(o) {
		this.o = o;
	}
	get(k) {
		return Reflect.field(this.o,k);
	}
	keys() {
		return new haxe_iterators_ArrayIterator(Reflect.fields(this.o));
	}
	keyValueIterator() {
		let a = [];
		let key = this.keys();
		while(key.hasNext()) {
			let key1 = key.next();
			a.push({ key : key1, value : this.get(key1)});
		}
		a.sort(function(a,b) {
			return Reflect.compare(a.key,b.key);
		});
		return new haxe_iterators_ArrayIterator(a);
	}
}
thx_AnonymousMap.__name__ = true;
thx_AnonymousMap.__interfaces__ = [haxe_IMap];
Object.assign(thx_AnonymousMap.prototype, {
	__class__: thx_AnonymousMap
	,o: null
});
class tink_chunk_ChunkBase {
	flatten(into) {
	}
}
tink_chunk_ChunkBase.__name__ = true;
Object.assign(tink_chunk_ChunkBase.prototype, {
	__class__: tink_chunk_ChunkBase
});
class tink_chunk_ChunkObject {
}
tink_chunk_ChunkObject.__name__ = true;
tink_chunk_ChunkObject.__isInterface__ = true;
Object.assign(tink_chunk_ChunkObject.prototype, {
	__class__: tink_chunk_ChunkObject
	,flatten: null
	,getLength: null
	,toString: null
	,toBytes: null
	,blitTo: null
});
class tink__$Chunk_EmptyChunk extends tink_chunk_ChunkBase {
	constructor() {
		super();
	}
	getLength() {
		return 0;
	}
	blitTo(target,offset) {
	}
	toString() {
		return "";
	}
	toBytes() {
		return tink__$Chunk_EmptyChunk.EMPTY;
	}
}
tink__$Chunk_EmptyChunk.__name__ = true;
tink__$Chunk_EmptyChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_EmptyChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink__$Chunk_EmptyChunk.prototype, {
	__class__: tink__$Chunk_EmptyChunk
});
class tink_Chunk {
	static concat(this1,that) {
		return tink_chunk_CompoundChunk.cons(this1,that);
	}
	static catChunk(a,b) {
		return tink_Chunk.concat(a,b);
	}
}
class tink_chunk_ByteChunk extends tink_chunk_ChunkBase {
	constructor(data,from,to) {
		super();
		this.data = data;
		this.from = from;
		this.to = to;
	}
	flatten(into) {
		into.push(this);
	}
	getLength() {
		return this.to - this.from;
	}
	blitTo(target,offset) {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		target.blit(offset,this.wrapped,this.from,this.to - this.from);
	}
	toBytes() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.sub(this.from,this.to - this.from);
	}
	toString() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.getString(this.from,this.to - this.from);
	}
	static of(b) {
		if(b.length == 0) {
			return tink_Chunk.EMPTY;
		}
		let ret = new tink_chunk_ByteChunk(b.b.bufferValue,0,b.length);
		ret.wrapped = b;
		return ret;
	}
}
tink_chunk_ByteChunk.__name__ = true;
tink_chunk_ByteChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_ByteChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink_chunk_ByteChunk.prototype, {
	__class__: tink_chunk_ByteChunk
	,data: null
	,from: null
	,to: null
	,wrapped: null
});
class tink_chunk_CompoundChunk extends tink_chunk_ChunkBase {
	constructor() {
		super();
	}
	getLength() {
		return this.length;
	}
	flatten(into) {
		let _g = 0;
		let _g1 = this.chunks;
		while(_g < _g1.length) _g1[_g++].flatten(into);
	}
	blitTo(target,offset) {
		let _g = 0;
		let _g1 = this.chunks.length;
		while(_g < _g1) {
			let i = _g++;
			this.chunks[i].blitTo(target,offset + this.offsets[i]);
		}
	}
	toString() {
		return this.toBytes().toString();
	}
	toBytes() {
		let ret = new haxe_io_Bytes(new ArrayBuffer(this.length));
		this.blitTo(ret,0);
		return ret;
	}
	static asCompound(c) {
		if(((c) instanceof tink_chunk_CompoundChunk)) {
			return c;
		} else {
			return null;
		}
	}
	static cons(a,b) {
		let _g = b.getLength();
		if(a.getLength() == 0) {
			if(_g == 0) {
				return tink_Chunk.EMPTY;
			} else {
				return b;
			}
		} else if(_g == 0) {
			return a;
		} else {
			let _g = tink_chunk_CompoundChunk.asCompound(b);
			let _g1 = tink_chunk_CompoundChunk.asCompound(a);
			if(_g1 == null) {
				if(_g == null) {
					return tink_chunk_CompoundChunk.create([a,b],2);
				} else if(_g.depth < 100) {
					return tink_chunk_CompoundChunk.create([a,b],_g.depth + 1);
				} else {
					let flat = [];
					_g.flatten(flat);
					b.flatten(flat);
					return tink_chunk_CompoundChunk.create(flat,2);
				}
			} else if(_g == null) {
				if(_g1.depth < 100) {
					return tink_chunk_CompoundChunk.create([a,b],_g1.depth + 1);
				} else {
					let flat = [];
					_g1.flatten(flat);
					b.flatten(flat);
					return tink_chunk_CompoundChunk.create(flat,2);
				}
			} else {
				let depth = _g1.depth > _g.depth ? _g1.depth : _g.depth;
				return tink_chunk_CompoundChunk.create(_g1.chunks.concat(_g.chunks),depth);
			}
		}
	}
	static create(chunks,depth) {
		let ret = new tink_chunk_CompoundChunk();
		let offsets = [0];
		let length = 0;
		let _g = 0;
		while(_g < chunks.length) offsets.push(length += chunks[_g++].getLength());
		ret.chunks = chunks;
		ret.offsets = offsets;
		ret.length = length;
		ret.depth = depth;
		return ret;
	}
}
tink_chunk_CompoundChunk.__name__ = true;
tink_chunk_CompoundChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_CompoundChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink_chunk_CompoundChunk.prototype, {
	__class__: tink_chunk_CompoundChunk
	,chunks: null
	,offsets: null
	,length: null
	,depth: null
});
class tink_core_LinkObject {
}
tink_core_LinkObject.__name__ = true;
tink_core_LinkObject.__isInterface__ = true;
Object.assign(tink_core_LinkObject.prototype, {
	__class__: tink_core_LinkObject
	,cancel: null
});
class tink_core_SimpleLink {
	constructor(f) {
		this.f = f;
	}
	cancel() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
}
tink_core_SimpleLink.__name__ = true;
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core_SimpleLink.prototype, {
	__class__: tink_core_SimpleLink
	,f: null
});
class tink_core__$Callback_LinkPair {
	constructor(a,b) {
		this.dissolved = false;
		this.a = a;
		this.b = b;
	}
	cancel() {
		if(!this.dissolved) {
			this.dissolved = true;
			let this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			let this2 = this.b;
			if(this2 != null) {
				this2.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
}
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core__$Callback_LinkPair.prototype, {
	__class__: tink_core__$Callback_LinkPair
	,a: null
	,b: null
	,dissolved: null
});
class tink_core__$Callback_ListCell {
	constructor(cb,list) {
		if(cb == null) {
			throw haxe_Exception.thrown("callback expected but null received");
		}
		this.cb = cb;
		this.list = list;
	}
	cancel() {
		if(this.list != null) {
			let list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used <= list.cells.length >> 1) {
				list.compact();
			}
		}
	}
}
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core__$Callback_ListCell.prototype, {
	__class__: tink_core__$Callback_ListCell
	,cb: null
	,list: null
});
class tink_core__$Lazy_LazyObject {
}
tink_core__$Lazy_LazyObject.__name__ = true;
tink_core__$Lazy_LazyObject.__isInterface__ = true;
Object.assign(tink_core__$Lazy_LazyObject.prototype, {
	__class__: tink_core__$Lazy_LazyObject
	,get: null
	,map: null
});
class tink_core__$Lazy_LazyConst {
	constructor(value) {
		this.value = value;
	}
	get() {
		return this.value;
	}
	map(f) {
		let _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
}
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
Object.assign(tink_core__$Lazy_LazyConst.prototype, {
	__class__: tink_core__$Lazy_LazyConst
	,value: null
});
class tink_core__$Future_SyncFuture {
	constructor(value) {
		this.value = value;
	}
	map(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	flatMap(f) {
		let _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return f(_gthis.value.get()).handle($yield);
		});
	}
	handle(cb) {
		tink_core_Callback.invoke(cb,this.value.get());
		return null;
	}
	eager() {
		return this;
	}
	gather() {
		return this;
	}
}
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core_FutureObject];
Object.assign(tink_core__$Future_SyncFuture.prototype, {
	__class__: tink_core__$Future_SyncFuture
	,value: null
});
class tink_core_Future {
	static next(this1,n) {
		return this1.flatMap(function(v) {
			return n(v);
		});
	}
	static flatten(f) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			let inner = null;
			return new tink_core__$Callback_LinkPair(f.handle(function(second) {
				inner = second.handle($yield);
			}),new tink_core_SimpleLink(function() {
				if(inner != null) {
					inner.cancel();
				}
			}));
		});
	}
	static async(f,lazy) {
		if(lazy == null) {
			lazy = false;
		}
		if(lazy) {
			return new tink_core__$Future_SuspendableFuture(function($yield) {
				f($yield);
				return null;
			});
		} else {
			let op = new tink_core_FutureTrigger();
			tink_core_Callback.invoke(f,$bind(op,op.trigger));
			return op;
		}
	}
}
class tink_core__$Lazy_LazyFunc {
	constructor(f) {
		this.f = f;
	}
	get() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	map(f) {
		let _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get());
		});
	}
}
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
Object.assign(tink_core__$Lazy_LazyFunc.prototype, {
	__class__: tink_core__$Lazy_LazyFunc
	,f: null
	,result: null
});
class tink_core_NamedWith {
	constructor(name,value) {
		this.name = name;
		this.value = value;
	}
}
tink_core_NamedWith.__name__ = true;
Object.assign(tink_core_NamedWith.prototype, {
	__class__: tink_core_NamedWith
	,name: null
	,value: null
});
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
class tink_core_OutcomeTools {
	static sure(outcome) {
		switch(outcome._hx_index) {
		case 0:
			return outcome.data;
		case 1:
			let _g = outcome.failure;
			let _g1 = tink_core_TypedError.asError(_g);
			if(_g1 == null) {
				throw haxe_Exception.thrown(_g);
			} else {
				return _g1.throwSelf();
			}
			break;
		}
	}
}
tink_core_OutcomeTools.__name__ = true;
class tink_core_Promise {
	static next(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		let gather1 = gather;
		if(gather == null) {
			gather1 = true;
		}
		let ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				return f(o.data);
			case 1:
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o.failure)));
			}
		});
		if(gather1) {
			return ret.gather();
		} else {
			return ret;
		}
	}
}
class tink_http_ClientObject {
}
tink_http_ClientObject.__name__ = true;
tink_http_ClientObject.__isInterface__ = true;
Object.assign(tink_http_ClientObject.prototype, {
	__class__: tink_http_ClientObject
	,request: null
});
class tink_http__$Client_CustomClient {
	constructor(preprocessors,postprocessors,real) {
		this.preprocessors = preprocessors;
		this.postprocessors = postprocessors;
		this.real = real;
	}
	pipe(value,transforms,index) {
		if(index == null) {
			index = 0;
		}
		if(transforms != null && index < transforms.length) {
			let _g = $bind(this,this.pipe);
			let transforms1 = transforms;
			let index1 = index + 1;
			let tmp = function(value) {
				return _g(value,transforms1,index1);
			};
			return tink_core_Promise.next(transforms[index](value),tmp);
		} else {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(value)));
		}
	}
	request(req) {
		let _gthis = this;
		return tink_core_Promise.next(this.pipe(req,this.preprocessors),function(req) {
			let tmp = _gthis.real.request(req);
			let _g = $bind(_gthis,_gthis.pipe);
			let transforms;
			if(_gthis.postprocessors == null) {
				transforms = null;
			} else {
				let _g = [];
				let _g1 = 0;
				let _g2 = _gthis.postprocessors;
				while(_g1 < _g2.length) _g.push(_g2[_g1++](req));
				transforms = _g;
			}
			return tink_core_Promise.next(tmp,function(value) {
				return _g(value,transforms);
			});
		});
	}
	static concat(a,b) {
		if(a == null) {
			return b;
		} else if(b == null) {
			return a;
		} else {
			return a.concat(b);
		}
	}
	static create(c,preprocessors,postprocessors) {
		let _g = ((c) instanceof tink_http__$Client_CustomClient) ? c : null;
		if(_g == null) {
			return new tink_http__$Client_CustomClient(preprocessors,postprocessors,c);
		} else {
			let v = _g;
			return new tink_http__$Client_CustomClient(tink_http__$Client_CustomClient.concat(preprocessors,v.preprocessors),tink_http__$Client_CustomClient.concat(v.postprocessors,postprocessors),v.real);
		}
	}
}
tink_http__$Client_CustomClient.__name__ = true;
tink_http__$Client_CustomClient.__interfaces__ = [tink_http_ClientObject];
Object.assign(tink_http__$Client_CustomClient.prototype, {
	__class__: tink_http__$Client_CustomClient
	,preprocessors: null
	,postprocessors: null
	,real: null
});
class tink_http_Container {
}
tink_http_Container.__name__ = true;
tink_http_Container.__isInterface__ = true;
class tink_http_Fetch {
	static fetch(url,options) {
		return tink_core_Future.async(function(cb) {
			let method = "GET";
			let headers = null;
			let body = tink_io_Source.EMPTY;
			let type = tink_http_ClientType.Default;
			let followRedirect = true;
			if(options != null) {
				if(options.method != null) {
					method = options.method;
				}
				if(options.headers != null) {
					headers = options.headers;
				}
				if(options.body != null) {
					body = options.body;
				}
				if(options.client != null) {
					type = options.client;
				}
				if(options.followRedirect == false) {
					followRedirect = false;
				}
			}
			let client = tink_http_Fetch.getClient(type,url.scheme == "https");
			if(options != null && options.augment != null) {
				let pipeline = options.augment;
				client = tink_http__$Client_CustomClient.create(client,pipeline.before,pipeline.after);
			}
			client.request(new tink_http_OutgoingRequest(new tink_http_OutgoingRequestHeader(method,url,null,headers),body)).handle(function(res) {
				switch(res._hx_index) {
				case 0:
					let _g = res.data;
					let _g1 = _g.header.statusCode;
					switch(_g1) {
					case 301:case 302:case 303:case 307:case 308:
						let code = _g1;
						if(followRedirect) {
							tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(_g.header.byName("location".toLowerCase()))),function(location) {
								let this1 = tink_Url.resolve(url,tink_Url.fromString(location));
								let this2;
								if(code == 303) {
									let __o0 = options;
									let __tink_tmp115 = { method : "GET"};
									let _g = __o0.headers;
									if(_g != null) {
										__tink_tmp115.headers = _g;
									}
									let _g1 = __o0.followRedirect;
									if(_g1 != null) {
										__tink_tmp115.followRedirect = _g1;
									}
									let _g2 = __o0.client;
									if(_g2 != null) {
										__tink_tmp115.client = _g2;
									}
									let _g3 = __o0.body;
									if(_g3 != null) {
										__tink_tmp115.body = _g3;
									}
									let _g4 = __o0.augment;
									if(_g4 != null) {
										__tink_tmp115.augment = _g4;
									}
									this2 = __tink_tmp115;
								} else {
									this2 = options;
								}
								return tink_http_Fetch.fetch(this1,this2);
							}).handle(cb);
						} else {
							cb(tink_core_Outcome.Success(_g));
						}
						break;
					default:
						cb(tink_core_Outcome.Success(_g));
					}
					break;
				case 1:
					cb(tink_core_Outcome.Failure(res.failure));
					break;
				}
			});
		});
	}
	static getClient(type,secure) {
		let cache = secure ? tink_http_Fetch.sclient : tink_http_Fetch.client;
		if(!cache.exists(type)) {
			let c;
			switch(type._hx_index) {
			case 0:
				c = secure ? new tink_http_clients_SecureJsClient() : new tink_http_clients_JsClient();
				break;
			case 1:
				c = new tink_http_clients_LocalContainerClient(type.container);
				break;
			case 2:
				c = secure ? new tink_http_clients_StdClient() : new tink_http_clients_StdClient();
				break;
			case 3:
				c = type.v;
				break;
			}
			cache.set(type,c);
		}
		return cache.get(type);
	}
}
tink_http_Fetch.__name__ = true;
var tink_http_ClientType = $hxEnums["tink.http.ClientType"] = { __ename__ : true, __constructs__ : ["Default","Local","StdLib","Custom"]
	,Default: {_hx_index:0,__enum__:"tink.http.ClientType",toString:$estr}
	,Local: ($_=function(container) { return {_hx_index:1,container:container,__enum__:"tink.http.ClientType",toString:$estr}; },$_.__params__ = ["container"],$_)
	,StdLib: {_hx_index:2,__enum__:"tink.http.ClientType",toString:$estr}
	,Custom: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"tink.http.ClientType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class tink_http_FetchResponse {
	static all(this1) {
		return tink_core_Promise.next(this1,function(r) {
			return tink_core_Promise.next(tink_io_RealSourceTools.all(r.body),function(chunk) {
				if(r.header.statusCode >= 400) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(tink_core_TypedError.withData(r.header.statusCode,r.header.reason,chunk.toString(),{ fileName : "tink/http/Fetch.hx", lineNumber : 138, className : "tink.http._Fetch.FetchResponse_Impl_", methodName : "all"}))));
				} else {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(new tink_http_Message(r.header,chunk))));
				}
			});
		});
	}
}
class tink_http_HandlerObject {
}
tink_http_HandlerObject.__name__ = true;
tink_http_HandlerObject.__isInterface__ = true;
Object.assign(tink_http_HandlerObject.prototype, {
	__class__: tink_http_HandlerObject
	,process: null
});
class tink_http_Header {
	constructor(fields) {
		if(tink_http_Header._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(fields);
	}
	_hx_constructor(fields) {
		this.fields = fields == null ? [] : fields;
	}
	get(name) {
		let _g = [];
		let _g1 = 0;
		let _g2 = this.fields;
		while(_g1 < _g2.length) {
			let f = _g2[_g1];
			++_g1;
			if(f.name == name) {
				_g.push(f.value);
			}
		}
		return _g;
	}
	byName(name) {
		let _g = this.get(name);
		switch(_g.length) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"No " + name + " header found",{ fileName : "tink/http/Header.hx", lineNumber : 91, className : "tink.http.Header", methodName : "byName"}));
		case 1:
			return tink_core_Outcome.Success(_g[0]);
		default:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Multiple entries for " + name + " header",{ fileName : "tink/http/Header.hx", lineNumber : 95, className : "tink.http.Header", methodName : "byName"}));
		}
	}
}
tink_http_Header.__name__ = true;
Object.assign(tink_http_Header.prototype, {
	__class__: tink_http_Header
	,fields: null
});
class tink_http_HeaderField extends tink_core_NamedWith {
	constructor(name,value) {
		super(name,value);
	}
	static ofString(s) {
		let _g = s.indexOf(":");
		if(_g == -1) {
			return new tink_http_HeaderField(s.toLowerCase(),null);
		} else {
			return new tink_http_HeaderField(HxOverrides.substr(s,0,_g).toLowerCase(),StringTools.trim(HxOverrides.substr(s,_g + 1,null)));
		}
	}
}
tink_http_HeaderField.__name__ = true;
tink_http_HeaderField.__super__ = tink_core_NamedWith;
Object.assign(tink_http_HeaderField.prototype, {
	__class__: tink_http_HeaderField
});
class tink_http_Message {
	constructor(header,body) {
		if(tink_http_Message._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(header,body);
	}
	_hx_constructor(header,body) {
		this.header = header;
		this.body = body;
	}
}
tink_http_Message.__name__ = true;
Object.assign(tink_http_Message.prototype, {
	__class__: tink_http_Message
	,header: null
	,body: null
});
class tink_http_RequestHeader extends tink_http_Header {
	constructor(method,url,protocol,fields) {
		tink_http_Header._hx_skip_constructor = true;
		super();
		tink_http_Header._hx_skip_constructor = false;
		this._hx_constructor(method,url,protocol,fields);
	}
	_hx_constructor(method,url,protocol,fields) {
		if(protocol == null) {
			protocol = "HTTP/1.1";
		}
		this.method = method;
		this.url = url;
		this.protocol = protocol;
		super._hx_constructor(fields);
	}
}
tink_http_RequestHeader.__name__ = true;
tink_http_RequestHeader.__super__ = tink_http_Header;
Object.assign(tink_http_RequestHeader.prototype, {
	__class__: tink_http_RequestHeader
	,method: null
	,url: null
	,protocol: null
});
class tink_http_IncomingRequestHeader extends tink_http_RequestHeader {
	constructor(method,url,protocol,fields) {
		super(method,url,protocol,fields);
	}
}
tink_http_IncomingRequestHeader.__name__ = true;
tink_http_IncomingRequestHeader.__super__ = tink_http_RequestHeader;
Object.assign(tink_http_IncomingRequestHeader.prototype, {
	__class__: tink_http_IncomingRequestHeader
});
class tink_http_OutgoingRequestHeader extends tink_http_RequestHeader {
	constructor(method,url,protocol,fields) {
		super(method,url,protocol,fields);
	}
}
tink_http_OutgoingRequestHeader.__name__ = true;
tink_http_OutgoingRequestHeader.__super__ = tink_http_RequestHeader;
Object.assign(tink_http_OutgoingRequestHeader.prototype, {
	__class__: tink_http_OutgoingRequestHeader
});
class tink_http_OutgoingRequest extends tink_http_Message {
	constructor(header,body) {
		super(header,body);
	}
}
tink_http_OutgoingRequest.__name__ = true;
tink_http_OutgoingRequest.__super__ = tink_http_Message;
Object.assign(tink_http_OutgoingRequest.prototype, {
	__class__: tink_http_OutgoingRequest
});
class tink_http_IncomingRequest extends tink_http_Message {
	constructor(clientIp,header,body) {
		tink_http_Message._hx_skip_constructor = true;
		super();
		tink_http_Message._hx_skip_constructor = false;
		this._hx_constructor(clientIp,header,body);
	}
	_hx_constructor(clientIp,header,body) {
		this.clientIp = clientIp;
		super._hx_constructor(header,body);
	}
}
tink_http_IncomingRequest.__name__ = true;
tink_http_IncomingRequest.__super__ = tink_http_Message;
Object.assign(tink_http_IncomingRequest.prototype, {
	__class__: tink_http_IncomingRequest
	,clientIp: null
});
var tink_http_IncomingRequestBody = $hxEnums["tink.http.IncomingRequestBody"] = { __ename__ : true, __constructs__ : ["Plain","Parsed"]
	,Plain: ($_=function(source) { return {_hx_index:0,source:source,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_.__params__ = ["source"],$_)
	,Parsed: ($_=function(parts) { return {_hx_index:1,parts:parts,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_.__params__ = ["parts"],$_)
};
class tink_http_ResponseHeaderBase extends tink_http_Header {
	constructor(statusCode,reason,fields,protocol) {
		tink_http_Header._hx_skip_constructor = true;
		super();
		tink_http_Header._hx_skip_constructor = false;
		this._hx_constructor(statusCode,reason,fields,protocol);
	}
	_hx_constructor(statusCode,reason,fields,protocol) {
		if(protocol == null) {
			protocol = "HTTP/1.1";
		}
		this.statusCode = statusCode;
		this.reason = reason == null ? httpstatus_HttpStatusMessage.fromCode(statusCode) : reason;
		this.protocol = protocol;
		super._hx_constructor(fields);
	}
}
tink_http_ResponseHeaderBase.__name__ = true;
tink_http_ResponseHeaderBase.__super__ = tink_http_Header;
Object.assign(tink_http_ResponseHeaderBase.prototype, {
	__class__: tink_http_ResponseHeaderBase
	,statusCode: null
	,reason: null
	,protocol: null
});
class tink_http__$Response_OutgoingResponseData extends tink_http_Message {
	constructor(header,body) {
		super(header,body);
	}
}
tink_http__$Response_OutgoingResponseData.__name__ = true;
tink_http__$Response_OutgoingResponseData.__super__ = tink_http_Message;
Object.assign(tink_http__$Response_OutgoingResponseData.prototype, {
	__class__: tink_http__$Response_OutgoingResponseData
});
class tink_http_IncomingResponse extends tink_http_Message {
	constructor(header,body) {
		super(header,body);
	}
}
tink_http_IncomingResponse.__name__ = true;
tink_http_IncomingResponse.__super__ = tink_http_Message;
Object.assign(tink_http_IncomingResponse.prototype, {
	__class__: tink_http_IncomingResponse
});
var tink_http_BodyPart = $hxEnums["tink.http.BodyPart"] = { __ename__ : true, __constructs__ : ["Value","File"]
	,Value: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.http.BodyPart",toString:$estr}; },$_.__params__ = ["v"],$_)
	,File: ($_=function(handle) { return {_hx_index:1,handle:handle,__enum__:"tink.http.BodyPart",toString:$estr}; },$_.__params__ = ["handle"],$_)
};
class tink_http_clients_JsClient {
	constructor(credentials) {
		this.credentials = false;
		this.secure = false;
		if(credentials) {
			this.credentials = true;
		}
	}
	request(req) {
		return this.jsRequest(req);
	}
	jsRequest(req) {
		let _gthis = this;
		return tink_core_Future.async(function(cb) {
			let http = new XMLHttpRequest();
			let url = tink_Url.toString(req.header.url);
			if(req.header.url.scheme == null) {
				url = (_gthis.secure ? "https:" : "http:") + url;
			}
			http.open(req.header.method,url);
			http.withCredentials = _gthis.credentials;
			http.responseType = "arraybuffer";
			let _this = req.header.fields;
			let _g_current = 0;
			while(_g_current < _this.length) {
				let header = _this[_g_current++];
				switch(header.name) {
				case "content-length":case "host":
					break;
				default:
					http.setRequestHeader(header.name,header.value);
				}
			}
			http.onreadystatechange = function() {
				if(http.readyState == 4) {
					if(http.status != 0) {
						let headers;
						let _g = http.getAllResponseHeaders();
						if(_g == null) {
							headers = [];
						} else {
							let _g1 = [];
							let _g2 = 0;
							let _g3 = _g.split("\r\n");
							while(_g2 < _g3.length) {
								let line = _g3[_g2];
								++_g2;
								if(line != "") {
									_g1.push(tink_http_HeaderField.ofString(line));
								}
							}
							headers = _g1;
						}
						let _g1 = http.response;
						cb(tink_core_Outcome.Success(new tink_http_IncomingResponse(new tink_http_ResponseHeaderBase(http.status,http.statusText,headers,"HTTP/1.1"),_g1 == null ? tink_io_Source.EMPTY : new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofData(_g1)))))));
					} else {
						let _g = cb;
						let a1 = tink_core_Outcome.Failure(tink_core_TypedError.withData(502,"XMLHttpRequest Error",{ request : req, error : "Status code is zero"},{ fileName : "tink/http/clients/JsClient.hx", lineNumber : 61, className : "tink.http.clients.JsClient", methodName : "jsRequest"}));
						haxe_Timer.delay(function() {
							_g(a1);
						},1);
					}
				}
			};
			http.onerror = function(e) {
				cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(502,"XMLHttpRequest Error",{ request : req, error : e},{ fileName : "tink/http/clients/JsClient.hx", lineNumber : 67, className : "tink.http.clients.JsClient", methodName : "jsRequest"})));
			};
			if(req.header.method == "GET") {
				http.send();
			} else {
				tink_io_IdealSourceTools.all(req.body).handle(function(chunk) {
					http.send(new Int8Array(chunk.toBytes().b.bufferValue));
				});
			}
		});
	}
}
tink_http_clients_JsClient.__name__ = true;
tink_http_clients_JsClient.__interfaces__ = [tink_http_ClientObject];
Object.assign(tink_http_clients_JsClient.prototype, {
	__class__: tink_http_clients_JsClient
	,secure: null
	,credentials: null
});
class tink_http_clients_LocalContainerClient {
	constructor(container) {
		this.container = container;
	}
	request(req) {
		let this1 = req.header.url;
		return tink_core_Future.next(this.container.serve(new tink_http_IncomingRequest("127.0.0.1",new tink_http_IncomingRequestHeader(req.header.method,tink_Url.fromString(this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),"HTTP/1.1",req.header.fields),tink_http_IncomingRequestBody.Plain(req.body))),function(res) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(new tink_http_IncomingResponse(res.header,res.body))));
		});
	}
}
tink_http_clients_LocalContainerClient.__name__ = true;
tink_http_clients_LocalContainerClient.__interfaces__ = [tink_http_ClientObject];
Object.assign(tink_http_clients_LocalContainerClient.prototype, {
	__class__: tink_http_clients_LocalContainerClient
	,container: null
});
class tink_http_clients_SecureJsClient extends tink_http_clients_JsClient {
	constructor(credentials) {
		super(credentials);
		this.secure = true;
	}
	request(req) {
		return this.jsRequest(req);
	}
}
tink_http_clients_SecureJsClient.__name__ = true;
tink_http_clients_SecureJsClient.__super__ = tink_http_clients_JsClient;
Object.assign(tink_http_clients_SecureJsClient.prototype, {
	__class__: tink_http_clients_SecureJsClient
});
class tink_http_clients_StdClient {
	constructor(worker) {
		this.worker = tink_io_Worker.ensure(worker);
	}
	request(req) {
		let _gthis = this;
		return tink_core_Future.async(function(cb) {
			let r = new haxe_http_HttpJs(tink_Url.toString(req.header.url));
			let send = function(post) {
				let code = 200;
				r.onStatus = function(c) {
					code = c;
				};
				let headers = function() {
					return [];
				};
				r.onError = function(msg) {
					if(code == 200) {
						code = 500;
					}
					tink_io_Worker.work(_gthis.worker,new tink_core__$Lazy_LazyConst(true)).handle(tink_core_Callback.fromNiladic(function() {
						cb(tink_core_Outcome.Failure(new tink_core_TypedError(code,msg,{ fileName : "tink/http/clients/StdClient.hx", lineNumber : 44, className : "tink.http.clients.StdClient", methodName : "request"})));
					}));
				};
				r.onData = function(data) {
					tink_io_Worker.work(_gthis.worker,new tink_core__$Lazy_LazyConst(true)).handle(tink_core_Callback.fromNiladic(function() {
						let cb1 = cb;
						let fields = headers();
						cb1(tink_core_Outcome.Success(new tink_http_IncomingResponse(new tink_http_ResponseHeaderBase(code,"OK",fields,"HTTP/1.1"),new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(data)))))));
					}));
				};
				tink_io_Worker.work(_gthis.worker,new tink_core__$Lazy_LazyFunc(function() {
					r.request(post);
				}));
			};
			let _this = req.header.fields;
			let _g_current = 0;
			while(_g_current < _this.length) {
				let h = _this[_g_current++];
				r.setHeader(h.name,h.value);
			}
			switch(req.header.method) {
			case "GET":case "HEAD":case "OPTIONS":
				send(false);
				break;
			default:
				tink_io_IdealSourceTools.all(req.body).handle(function(bytes) {
					r.setPostData(bytes.toString());
					send(true);
				});
			}
		});
	}
}
tink_http_clients_StdClient.__name__ = true;
tink_http_clients_StdClient.__interfaces__ = [tink_http_ClientObject];
Object.assign(tink_http_clients_StdClient.prototype, {
	__class__: tink_http_clients_StdClient
	,worker: null
});
class tink_http_containers_LocalContainer {
	constructor() {
	}
	serve(req) {
		if(!this.running) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(new tink_http__$Response_OutgoingResponseData(new tink_http_ResponseHeaderBase(503,"Server stopped",[],"HTTP/1.1"),tink_io_Source.EMPTY)));
		}
		return this.handler.process(req);
	}
}
tink_http_containers_LocalContainer.__name__ = true;
tink_http_containers_LocalContainer.__interfaces__ = [tink_http_Container];
Object.assign(tink_http_containers_LocalContainer.prototype, {
	__class__: tink_http_containers_LocalContainer
	,handler: null
	,running: null
});
class tink_streams_StreamObject {
}
tink_streams_StreamObject.__name__ = true;
tink_streams_StreamObject.__isInterface__ = true;
Object.assign(tink_streams_StreamObject.prototype, {
	__class__: tink_streams_StreamObject
	,reduce: null
});
class tink_streams_StreamBase {
	constructor() {
	}
	reduce(initial,reducer) {
		let _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.forEach(tink_streams_Handler.ofUnknown(function(item) {
				return reducer(initial,item).map(function(o) {
					switch(o._hx_index) {
					case 0:
						initial = o.result;
						return tink_streams_Handled.Resume;
					case 1:
						return tink_streams_Handled.Clog(o.e);
					}
				}).gather();
			})).handle(function(c) {
				switch(c._hx_index) {
				case 0:
					throw haxe_Exception.thrown("assert");
				case 1:
					cb(tink_streams_Reduction.Crashed(c.error,c.at));
					break;
				case 2:
					cb(tink_streams_Reduction.Failed(c.error));
					break;
				case 3:
					cb(tink_streams_Reduction.Reduced(initial));
					break;
				}
			});
		},true);
	}
	forEach(handler) {
		throw haxe_Exception.thrown("not implemented");
	}
}
tink_streams_StreamBase.__name__ = true;
tink_streams_StreamBase.__interfaces__ = [tink_streams_StreamObject];
Object.assign(tink_streams_StreamBase.prototype, {
	__class__: tink_streams_StreamBase
});
class tink_streams_Empty extends tink_streams_StreamBase {
	constructor() {
		super();
	}
	forEach(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Depleted));
	}
}
tink_streams_Empty.__name__ = true;
tink_streams_Empty.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_Empty.prototype, {
	__class__: tink_streams_Empty
});
class tink_io_Source {
	static concatAll(s) {
		return s.reduce(tink_Chunk.EMPTY,tink_streams_Reducer.ofSafe(function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(tink_Chunk.catChunk(res,cur))));
		}));
	}
}
class tink_io_RealSourceTools {
	static all(s) {
		return tink_io_Source.concatAll(s).map(function(o) {
			switch(o._hx_index) {
			case 1:
				return tink_core_Outcome.Failure(o.error);
			case 2:
				return tink_core_Outcome.Success(o.result);
			}
		}).gather();
	}
}
tink_io_RealSourceTools.__name__ = true;
class tink_io_IdealSourceTools {
	static all(s) {
		return tink_io_Source.concatAll(s).map(function(o) {
			return o.result;
		}).gather();
	}
}
tink_io_IdealSourceTools.__name__ = true;
class tink_io_WorkerObject {
}
tink_io_WorkerObject.__name__ = true;
tink_io_WorkerObject.__isInterface__ = true;
Object.assign(tink_io_WorkerObject.prototype, {
	__class__: tink_io_WorkerObject
	,work: null
});
class tink_io__$Worker_EagerWorker {
	constructor() {
	}
	work(task) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(task.get()));
	}
}
tink_io__$Worker_EagerWorker.__name__ = true;
tink_io__$Worker_EagerWorker.__interfaces__ = [tink_io_WorkerObject];
Object.assign(tink_io__$Worker_EagerWorker.prototype, {
	__class__: tink_io__$Worker_EagerWorker
});
class tink_io_Worker {
	static ensure(this1) {
		if(this1 == null) {
			return tink_io_Worker.get();
		} else {
			return this1;
		}
	}
	static get() {
		return tink_io_Worker.pool[Std.random(tink_io_Worker.pool.length)];
	}
	static work(this1,task) {
		return this1.work(task);
	}
}
class tink_pure_NodeIterator {
	constructor(node) {
		this.list = [];
		if(node != null) {
			this.list.push(node);
		}
	}
	hasNext() {
		return this.list.length > 0;
	}
	next() {
		let _g = this.list.pop();
		if(_g == null) {
			return null;
		} else {
			let _g1 = -_g.tails.length;
			while(_g1 < 0) this.list.push(_g.tails[-(_g1++) - 1]);
			return _g.value;
		}
	}
}
tink_pure_NodeIterator.__name__ = true;
Object.assign(tink_pure_NodeIterator.prototype, {
	__class__: tink_pure_NodeIterator
	,list: null
});
class tink_pure__$List_ReplaceSelector {
	static const(v) {
		return function(i) {
			return i == v;
		};
	}
}
class tink_pure__$List_ReplaceGenerator {
	static const(v) {
		return function(_) {
			return v;
		};
	}
}
var tink_streams_Handled = $hxEnums["tink.streams.Handled"] = { __ename__ : true, __constructs__ : ["BackOff","Finish","Resume","Clog"]
	,BackOff: {_hx_index:0,__enum__:"tink.streams.Handled",toString:$estr}
	,Finish: {_hx_index:1,__enum__:"tink.streams.Handled",toString:$estr}
	,Resume: {_hx_index:2,__enum__:"tink.streams.Handled",toString:$estr}
	,Clog: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.Handled",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Conclusion = $hxEnums["tink.streams.Conclusion"] = { __ename__ : true, __constructs__ : ["Halted","Clogged","Failed","Depleted"]
	,Halted: ($_=function(rest) { return {_hx_index:0,rest:rest,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["rest"],$_)
	,Clogged: ($_=function(error,at) { return {_hx_index:1,error:error,at:at,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Depleted: {_hx_index:3,__enum__:"tink.streams.Conclusion",toString:$estr}
};
var tink_streams_ReductionStep = $hxEnums["tink.streams.ReductionStep"] = { __ename__ : true, __constructs__ : ["Progress","Crash"]
	,Progress: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["result"],$_)
	,Crash: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Reduction = $hxEnums["tink.streams.Reduction"] = { __ename__ : true, __constructs__ : ["Crashed","Failed","Reduced"]
	,Crashed: ($_=function(error,at) { return {_hx_index:0,error:error,at:at,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:1,error:error,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Reduced: ($_=function(result) { return {_hx_index:2,result:result,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["result"],$_)
};
class tink_streams_Single extends tink_streams_StreamBase {
	constructor(value) {
		super();
		this.value = value;
	}
	forEach(handle) {
		let _gthis = this;
		return handle(this.value.get()).map(function(step) {
			switch(step._hx_index) {
			case 0:
				return tink_streams_Conclusion.Halted(_gthis);
			case 1:
				return tink_streams_Conclusion.Halted(tink_streams_Empty.inst);
			case 2:
				return tink_streams_Conclusion.Depleted;
			case 3:
				return tink_streams_Conclusion.Clogged(step.e,_gthis);
			}
		}).gather();
	}
}
tink_streams_Single.__name__ = true;
tink_streams_Single.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_Single.prototype, {
	__class__: tink_streams_Single
	,value: null
});
class tink_streams_Handler {
	static ofUnknown(f) {
		return f;
	}
}
class tink_streams_Reducer {
	static ofSafe(f) {
		return f;
	}
}
class zenlog_ILogger {
}
zenlog_ILogger.__name__ = true;
zenlog_ILogger.__isInterface__ = true;
Object.assign(zenlog_ILogger.prototype, {
	__class__: zenlog_ILogger
	,debug: null
	,error: null
});
class zenlog_TraceLogger {
	constructor() {
	}
	debug(message,extra,pos) {
		haxe_Log.trace(Std.string(message) + (extra != null ? " [" + extra.join(", ") + "]" : ""),pos);
	}
	error(message,extra,pos) {
		haxe_Log.trace(Std.string(message) + (extra != null ? " [" + extra.join(", ") + "]" : ""),pos);
	}
}
zenlog_TraceLogger.__name__ = true;
zenlog_TraceLogger.__interfaces__ = [zenlog_ILogger];
Object.assign(zenlog_TraceLogger.prototype, {
	__class__: zenlog_TraceLogger
});
class zenlog_Log {
}
zenlog_Log.__name__ = true;
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
js_Boot.__toStr = ({ }).toString;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
APIUtil._host = "";
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
tink_state_Observable.stack = new haxe_ds_List();
tink_state_Observable.scheduled = [];
tink_state_Observable.hasRAF = typeof window != 'undefined' && 'requestAnimationFrame' in window;
tink_state_Observable.isScheduled = false;
tink_core_Callback.depth = 0;
coconut_diffing_Widget._hx_skip_constructor = false;
coconut_diffing_Widget.defer = tink_state_Observable.schedule;
tink_state__$Observable_SimpleObservable._hx_skip_constructor = false;
HomePage.__type = { create : function(__coco_data_) {
	return new HomePage(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
tink_pure__$List_Node.EMPTY = [];
spectatory_Location.href = (function($this) {
	var $r;
	let this1 = new tink_state__$State_SimpleState(tink_Url.fromString(window.location.href),null,null);
	let s = this1;
	
			(function () {

				if ( typeof window.CustomEvent === "function" ) return;

				function CustomEvent ( event, params ) {
					params = params || { bubbles: false, cancelable: false, detail: undefined };
					var evt = document.createEvent( "CustomEvent" );
					evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
					return evt;
				}

				CustomEvent.prototype = window.Event.prototype;

				window.CustomEvent = CustomEvent;
			})();
		;
	let update = function() {
		let href = window.location.href;
		if(tink_Url.fromString(href) != tink_state_State.get_value(s)) {
			s.set(tink_Url.fromString(href));
		}
	};
	let oldPushState = ($_=window.history,$bind($_,$_.pushState));
	window.history.pushState = function(data,title,url) {
		oldPushState(data,title,url);
		update();
	};
	let oldReplaceState = ($_=window.history,$bind($_,$_.replaceState));
	window.history.replaceState = function(data,title,url) {
		oldReplaceState(data,title,url);
		update();
	};
	window.addEventListener("popstate",update);
	$r = s;
	return $r;
}(this));
tink_state_ConstObservable.NEVER = new tink_core__$Future_SuspendableFuture(function(_) {
	return null;
});
Root.__type = { create : function(__coco_data_) {
	return new Root(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
NavBar.__type = { create : function(__coco_data_) {
	return new NavBar(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
NavItem.__type = { create : function(__coco_data_) {
	return new NavItem(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
UnknownPage.__type = { create : function(__coco_data_) {
	return new UnknownPage(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
bootstrap_Button.__type = { create : function(__coco_data_) {
	return new bootstrap_Button(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
bootstrap_Container.__type = { create : function(__coco_data_) {
	return new bootstrap_Container(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
bootstrap_Row.__type = { create : function(__coco_data_) {
	return new bootstrap_Row(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
bootstrap_Col.__type = { create : function(__coco_data_) {
	return new bootstrap_Col(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
bootstrap_Jumbotron.prefix = "jumbotron";
bootstrap_Jumbotron.__type = { create : function(__coco_data_) {
	return new bootstrap_Jumbotron(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
coconut_vdom__$Html_Elt.namespaces = (function($this) {
	var $r;
	let _g = new haxe_ds_StringMap();
	_g.h["svg"] = "http://www.w3.org/2000/svg";
	$r = _g;
	return $r;
}(this));
coconut_vdom_Html.nodeTypes = new haxe_ds_StringMap();
coconut_vdom_Html.UL = coconut_vdom_Html.nodeType("ul");
coconut_vdom_Html.SPAN = coconut_vdom_Html.nodeType("span");
coconut_vdom_Html.PRE = coconut_vdom_Html.nodeType("pre");
coconut_vdom_Html.P = coconut_vdom_Html.nodeType("p");
coconut_vdom_Html.NAV = coconut_vdom_Html.nodeType("nav");
coconut_vdom_Html.LI = coconut_vdom_Html.nodeType("li");
coconut_vdom_Html.INPUT = coconut_vdom_Html.nodeType("input");
coconut_vdom_Html.H2 = coconut_vdom_Html.nodeType("h2");
coconut_vdom_Html.H1 = coconut_vdom_Html.nodeType("h1");
coconut_vdom_Html.DIV = coconut_vdom_Html.nodeType("div");
coconut_vdom_Html.BUTTON = coconut_vdom_Html.nodeType("button");
coconut_vdom_Html.A = coconut_vdom_Html.nodeType("a");
bootstrap_ListGroup.itemTags = { item : function(attr) {
	let hxxMeta = { };
	let _g = new haxe_ds_StringMap();
	_g.h["list-group" + "-item"] = true;
	_g.h["list-group" + "-item-" + attr.variant] = attr.variant != null;
	_g.h["active"] = attr.active;
	_g.h["disabled"] = attr.disabled;
	let attr1 = { className : tink_domspec_ClassName.add(attr.className,tink_domspec_ClassName.ofMap(_g))};
	let __r = [];
	let _g1 = 0;
	let _g2 = attr.children;
	while(_g1 < (_g2 == null ? 0 : _g2.length)) {
		let _0 = _g2 == null ? null : _g2[_g1];
		++_g1;
		__r.push(_0);
	}
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LI,hxxMeta.ref,hxxMeta.key,attr1,__r);
}};
bootstrap_ListGroup.linkTags = { item : function(attr) {
	let hxxMeta = { };
	let _g = new haxe_ds_StringMap();
	_g.h["list-group" + "-item"] = true;
	_g.h["list-group" + "-item-action"] = true;
	_g.h["list-group" + "-item-" + attr.variant] = attr.variant != null;
	_g.h["active"] = attr.active;
	_g.h["disabled"] = attr.disabled;
	let attr1 = { className : tink_domspec_ClassName.add(attr.className,tink_domspec_ClassName.ofMap(_g)), href : attr.href};
	let __r = [];
	let _g1 = 0;
	let _g2 = attr.children;
	while(_g1 < (_g2 == null ? 0 : _g2.length)) {
		let _0 = _g2 == null ? null : _g2[_g1];
		++_g1;
		__r.push(_0);
	}
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta.ref,hxxMeta.key,attr1,__r);
}};
bootstrap_ListGroup.buttonTags = { item : function(attr) {
	let hxxMeta = { };
	let _g = new haxe_ds_StringMap();
	_g.h["list-group" + "-item"] = true;
	_g.h["list-group" + "-item-action"] = true;
	_g.h["list-group" + "-item-" + attr.variant] = attr.variant != null;
	_g.h["active"] = attr.active;
	let attr1 = { className : tink_domspec_ClassName.add(attr.className,tink_domspec_ClassName.ofMap(_g)), type : "button", disabled : attr.disabled, onclick : tink_core_Callback.fromNiladic(attr.onclick)};
	let __r = [];
	let _g1 = 0;
	let _g2 = attr.children;
	while(_g1 < (_g2 == null ? 0 : _g2.length)) {
		let _0 = _g2 == null ? null : _g2[_g1];
		++_g1;
		__r.push(_0);
	}
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BUTTON,hxxMeta.ref,hxxMeta.key,attr1,__r);
}};
bootstrap_ListGroup.__type = { create : function(__coco_data_) {
	return new bootstrap_ListGroup(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
chirps_ChirpPage.__type = { create : function(__coco_data_) {
	return new chirps_ChirpPage(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
chirps_ChirpSection.__type = { create : function(__coco_data_) {
	return new chirps_ChirpSection(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
chirps_PostChirp.__type = { create : function(__coco_data_) {
	return new chirps_PostChirp(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
chirps_RecentChirps.__type = { create : function(__coco_data_) {
	return new chirps_RecentChirps(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
chirps_UserSection.__type = { create : function(__coco_data_) {
	return new chirps_UserSection(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
chirps_SignInForm.__type = { create : function(__coco_data_) {
	return new chirps_SignInForm(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
chirps_RegisterForm.__type = { create : function(__coco_data_) {
	return new chirps_RegisterForm(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
coconut_diffing_Differ.WIDGET_INST = { };
coconut_diffing_Differ.EMPTY = { };
coconut_vdom__$Html_Text.inst = new coconut_vdom__$Html_Text();
coconut_vdom__$Renderer_DomBackend.PLACEHOLDER = coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"",null);
coconut_vdom_Renderer.DIFFER = new coconut_diffing_Differ(new coconut_vdom__$Renderer_DomBackend());
general_$tools_MyTextInput.__type = { create : function(__coco_data_) {
	return new general_$tools_MyTextInput(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
general_$tools_apitest_APITester.__type = { create : function(__coco_data_) {
	return new general_$tools_apitest_APITester(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
general_$tools_apitest_MethodNav.__type = { create : function(__coco_data_) {
	return new general_$tools_apitest_MethodNav(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
general_$tools_apitest_FormattedText.__type = { create : function(__coco_data_) {
	return new general_$tools_apitest_FormattedText(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
general_$tools_apitest_PostParamsView.__type = { create : function(__coco_data_) {
	return new general_$tools_apitest_PostParamsView(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
general_$tools_apitest_ResponsesView.__type = { create : function(__coco_data_) {
	return new general_$tools_apitest_ResponsesView(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
hawk_datatypes_Email._regex = new EReg("[A-Z0-9._%-]+@[A-Z0-9.-]+.[A-Z][A-Z][A-Z]?","i");
haxe_http_HttpBase._hx_skip_constructor = false;
tink__$Chunk_EmptyChunk.EMPTY = new haxe_io_Bytes(new ArrayBuffer(0));
tink_Chunk.EMPTY = new tink__$Chunk_EmptyChunk();
tink_http_Fetch.client = new haxe_ds_EnumValueMap();
tink_http_Fetch.sclient = new haxe_ds_EnumValueMap();
tink_http_Header._hx_skip_constructor = false;
tink_http_Message._hx_skip_constructor = false;
tink_streams_Empty.inst = new tink_streams_Empty();
tink_io_Source.EMPTY = tink_streams_Empty.inst;
tink_io_Worker.EAGER = new tink_io__$Worker_EagerWorker();
tink_io_Worker.pool = [tink_io_Worker.EAGER];
zenlog_Log.Logger = new zenlog_TraceLogger();
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
